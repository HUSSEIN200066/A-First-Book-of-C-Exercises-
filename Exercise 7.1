1. (Practice) Write array declarations for the following:
a. A list of 100 integer grades
const int SIZE = 100;
int grades[SIZE];
b. A list of 50 double-precision temperatures
const int SIZE = 50;
double temp[SIZE];
c. A list of 30 characters, each representing a code
const int SIZE = 30;
char code[SIZE];
d. A list of 100 integer years
const int SIZE = 100;
int year [SIZE];
e. A list of 32 double-precision velocities
const int SIZE = 32;
double velo[SIZE];
f. A list of 1000 double-precision distances
const int SIZE = 1000;
double dist[SIZE];
g. A list of 6 integer code numbersconst int SIZE = 6;
int codenum[SIZE];

2. (Practice) Write correct notation for the first, third, and seventh elements of the following
arrays:
a. int grades[20]
grades[0] refers to the first item stored in the array, grades[2] refers to the third item,
and grades[6] refers to the seventh item.
b. double prices[10]
prices[0] refers to the first item stored in the array, prices[2] refers to the third item,
and prices[6] refers to the seventh item.
c. double amounts[16]
amounts[0] refers to the first item stored in the array, amounts[2] refers to the third item,
and amounts[6] refers to the seventh item.
d. int dist[15]
dist[0] refers to the first item stored in the array, dist[2] refers to the third item,
and dist[6] refers to the seventh item.
e. double velocity[25]
velocity[0] refers to the first item stored in the array, velocity[2] refers to the third item,
and velocity[6] refers to the seventh item.
f. double time[100]
time[0] refers to the first item stored in the array, time[2] refers to the third item,
and time[6] refers to the seventh item.
3. (Practice) a. Write input statements using cin that can be used to enter values in the first,
third, and seventh elements of each array declared in Exercise 2.

a. cin >> grades[0];
  cin >> grades[2];
  cin >> grades[6]; 
b. cin >> prices[0];
  cin >> prices[2];
  cin >> prices[6]; 
c. cin >> amounts[0];
  cin >> amounts[2];
  cin >> amounts[6];
d. cin >>dist[0];
   cin >>dist[2];
   cint >>dist[6];
e. cin >>velocity[0];
   cin >>velocity[2];
   cint >>velocity[6];
f. cin >> time[0];
   cin >> time[2];
   cint >> time[6]; 
  
b. Write a for loop that can be used to enter values for each array declared in Exercise 2.

for (int grad = 0; grad <=20; grad++){
cin >> grade[grad];}
for (double price = 0; price <=10; price++){
cin >> prices[price];
}
for (double amount = 0; amount <=16; amount++){
cin >> amounts[amount];
}
for (int dis = 0; dis <=15; dis++){
cin >> dist[dis];
}
for (double velo = 0; velo <=25; velo++){
cin >> velocity[velo];
}
for (double ti = 0; ti <=100; ti++){
cin >> time[ti];
}

4. (Practice) a. Write output statements using cout that can be used to display values from the
first, third, and seventh elements of each array declared in Exercise 2.

a. cout << grades[0];
   cout << grades[2];
   cout << grades[6]; 
b. cout << prices[0];
  cout << prices[2];
   cout << prices[6]; 
c. cout << amounts[0];
   cout << amounts[2];
   cout << amounts[6];
d. cout <<dist[0];
   cout <<dist[2];
   cout <<dist[6];
e. cout <<velocity[0];
   cout <<velocity[2];
   cout <<velocity[6];
f. cout << time[0];
   cout << time[2];
   cout << time[6]; 

b. Write a for loop that can be used to display values for each array declared in Exercise 2.

for (int grad = 0; grad <=20; grad++){
cout << grade[grad];}
for (double price = 0; price <=10; price++){
cout << prices[price];
}
for (double amount = 0; amount <=16; amount++){
cout << amounts[amount];
}
for (int dis = 0; dis <=15; dis++){
cout << dist[dis];
}
for (double velo = 0; velo <=25; velo++){
cout << velocity[velo];
}
for (double ti = 0; ti <=100; ti++){
cout << time[ti];
}

5. (Desk check) List the elements displayed by the following sections of code:
a. for (m = 1; m <= 5; m++)
    cout << a[m] << “ “;
    -858993460 times five
b. for (k = 1; k <= 5; k = k + 2)
    cout <<  a[k] << “ “;
    -858993460 times three
c. for (j = 3; j <= 10; j++)
    cout << b[j] << “ “;
    -858993460 times seven
d. for (k = 3; k <= 12; k = k + 3)
    cout << b[k] << “ “;
    -858993460 times three
e. for (i = 2; i < 11; i = i + 2)
    cout << c[i] << “ “;
    -858993460 times five
    
    *Note that the complier just sent out junk numbers because the varables where never entered
    
6. (Program) a. Write, compile, and run a C++ program to input the following values into an
array named prices: 10.95, 16.32, 12.15, 8.22, 15.98, 26.22, 13.54, 6.45, and 17.59. After the
data has been entered, have your program display the values.

#include <iostream>
using namespace std;


int main()
{
	  const int NUMELS  =  9;
	  int i,  prices[NUMELS];
	  for (i  =  0;  i < NUMELS;  i++)    // Enter the grades
		  {
		    cout  <<  "Enter a price: ";
		    cin   >>  prices[i];
		   }
	  cout  <<  endl;
	  for (i  =  0;  i < NUMELS;  i++)    // Print the grades
		    cout  <<  "price ["  <<  i  <<  "] is "  <<  prices[i]  <<  endl;

	system("PAUSE");
	return 0;
	
}

b. Repeat Exercise 6a, but after the data has been entered, have your program display it in the
following form:
10.95 16.32 12.15
8.22 15.98 26.22
13.54  6.45 17.59

#include <iostream>
using namespace std;

int main()
{
	  const int NUMELS  =  9;
	  int i,  prices[NUMELS];
	  for (i  =  0;  i < NUMELS;  i++)    // Enter the grades
		  {

cout  <<  "Enter a price: ";
		    cin   >>  prices[i];
		   }
	  cout  <<  endl;
	  for (i = 0; i < 3; i++) {   // Print the grades
		  cout << prices[i] << " ";
	  }
	  cout << endl;
	  for (i = 3; i < 6; i++) {   // Print the grades
		  cout << prices[i] << " ";
	  }
	  cout << endl;
	  for (i = 6; i < NUMELS; i++) {   // Print the grades
		  cout << prices[i] << " ";
	  }
	  cout << endl;

	system("PAUSE");
	return 0;
	
}

7. (Program) Write, compile, and run a C++ program to input eight integer numbers into an
array named grade. As each number is input, add the numbers to a total. After all numbers are
input, display the numbers and their average.

#include <iostream>
using namespace std;


int main()
{
	  const int NUMELS  =  8;
	  int i,  grade[NUMELS], total = 0,average;
	  for (i  =  1;  i <= NUMELS;  i++)    // Enter the grades
		  {
		    cout  <<  "Enter a grade: ";
		    cin   >>  grade[i];
		   }
	  cout << endl;
	  for (i = 1; i <= 8; i++) {   // Print the grades
		  cout << grade[i] << " " << endl;
		  total = total + grade[i];
		  average = total / i;
		  
		  
	  }
	  cout << "The average is " << endl;
	  cout << average << endl;

	  system("PAUSE");
	
	return 0;
	
}

8. (Program) a. Write, compile, and run a C++ program to input 10 integer numbers into an
array named fmax and determine the maximum value entered. Your program should contain
only one loop, and the maximum should be determined as array element values are being
input. (Hint: Set the maximum equal to the first array element, which should be input before
the loop used to input the remaining array values.)

#include <iostream>
using namespace std;


int main()
{
	  const int NUMELS  = 10;
	  int i,  fmax[NUMELS],temp=0;
	  for (i = 1; i <= NUMELS; i++)    // Enter the grades
	  {
		  cout << "Enter a number: ";
		  cin >> fmax[i];

		  if (fmax[i] > temp){
             
			  temp = fmax[i];
		  }

	  }
	
	  cout << "The biggest number is: " << temp << endl;

	  system("PAUSE");
	
	return 0;
	

}

b. Repeat Exercise 8a, keeping track of both the maximum element in the array and the index
number for the maximum. After displaying the numbers, display these two messages
(replacing the underlines with the correct values):
The maximum value is: ____
This is element number ___ in the list of numbers

#include <iostream>
using namespace std;


int main()
{
	  const int NUMELS  = 10;
	  int i,  fmax[NUMELS],temp=0,max;
	  for (i = 0; i < NUMELS; i++)    // Enter the grades
	  {
		  cout << "Enter a number: ";
		  cin >> fmax[i];

		  if (fmax[i] > temp){
			  temp = fmax[i];
			  max = i;

		  }

	  }
	
	  cout << "The maximum value is: " << temp << endl;
	 cout << "This is element number [" << max << "] in the list of numbers" << endl;
	  
	  system("PAUSE");
	
	return 0;
	

}

c. Repeat Exercise 8b, but have your program locate the minimum value of the data entered.

#include <iostream>
using namespace std;


int main()
{
	  const int NUMELS  = 10;
	  int i,  fmax[NUMELS],temp=100000000,min;
	  for (i = 0; i < NUMELS; i++)    // Enter the grades
	  {
		  cout << "Enter a number: ";
		  cin >> fmax[i];

		  if (fmax[i] < temp){

temp = fmax[i];
			  min = i;

		  }

	  }
	
	  cout << "The minimum value is: " << temp << endl;
	 cout << "This is element number [" << min << "] in the list of numbers" << endl;
	  
	  system("PAUSE");
	
	return 0;
	

}

9. (Program) Write, compile, and run a C++ program that creates an array of five integer numbers
and displays these numbers in reverse order.

#include <cmath>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;


int main()
{
	  
	  int i, rev[] = { 1, 30, 3, 20, 5 };
	  int len = sizeof(rev) / sizeof(int);
	  int start = 0, end = len - 1;
	  
	  while (start <= end)
	  {
		  int temp = rev[start];
		  rev[start] = rev[end];
		  rev[end] = temp;
		  start++;
		  end--;
	  }
	  
	  for (i = 0; i < len; i++)    
	  {
		  cout << rev[i] << endl;
	  }

	  
	  system("PAUSE");
	
	return 0;
}

10. (Program) a. Write, compile, and run a C++ program to input the following integer numbers
into an array named grades: 89, 95, 72, 83, 99, 54, 86, 75, 92, 73, 79, 75, 82, and 73. As each
number is input, add the numbers to a total. After all numbers are input and the total is
obtained, calculate the average of the numbers, and use the average to determine the deviation
of each value from the average. Store each deviation in an array named deviation. Each
deviation is obtained as the element value less the average of all the data. Have your program
display each deviation with its corresponding element from the grades array.

#include <cmath>
#include <cstdio>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;


int main()
{
	  
	const int SIZE = 14;
	  float i, grade[SIZE],solution,standardDeviation = 0.0,deviation[SIZE];
	  int total = 0;
	  
	  for (i = 0; i < 14; i++)    
	  {
		  cout << "Enter your grade" << endl;
		  cin >> grade[SIZE];
		  total = total + grade[SIZE];

	  }
	  int average = total / 14;
	  cout << "Your total is" << endl;
	  cout << total << endl;
	  cout << "Your average is " << endl;
	  cout << average <<endl;
	  
	  for (i = 0; i < 14; i++){
		  standardDeviation += pow(grade[SIZE] - average, 2);
		  solution = sqrt(standardDeviation / 14);
		  cout << "Standard Deviation = " << solution << endl;
		  solution = deviation[SIZE];

	  }

	  system("PAUSE");
	
	return 0;
}

b. Calculate the variance of the data used in Exercise 10a. The variance is obtained by squaring
each deviation and dividing the sum of the squared deviations by the number of deviations.



11. (Program) Write, compile, and run a C++ program that specifies three one-dimensional arrays
named price, amount, and total. Each array should be capable of holding 10 elements.
Using a for loop, input values for the price and amount arrays. The entries in the total
array should be the product of the corresponding values in the price and amount arrays (so
total[i] = price[i] * amount[i]). After all the data has been entered, display the following
output, with the corresponding value under each column heading:
total     price     amount
-----     -----     ------



12. (Program) Define an array named peopleTypes that can store a maximum of 50 integer
values entered at the keyboard. Enter a series of 1s, 2s, 3s, and 4s in the array to represent
people at a local school function; 1 represents an infant, 2 represents a child, 3 represents a
teenager, and 4 represents an adult. No other integer value should be accepted as valid input,
and data entry should stop when a negative value is entered. Your program should count the
number of each 1, 2, 3, and 4 in the array and display a list of how many infants, children,
teenagers, and adults were at the school function.



13. (Program) a. Write, compile, and run a C++ program that reads a list of double-precision
grades from the keyboard into an array named grade. The grades are to be counted as they’re
read, and entry is to be terminated when a negative value has been entered. After all grades
have been input, your program should find and display the sum and average of the grades. The
grades should then be listed with an asterisk (*) placed in front of each grade that’s below the
average.

b. Extend the program written for Exercise 13a to display each grade and its letter equivalent,
using the following scale:
Greater than or equal to 90 = A
Greater than or equal to 80 and less than 90 = B
Greater than or equal to 70 and less than 80 = C
Greater than or equal to 60 and less than 70 = D
Less than 60 = F

14. (Program) Using the srand() and rand() C++ library functions (discussed in Section 6.8),
fill an array of 1000 floating-point numbers with random numbers that have been scaled to the
range 1 to 100. Then determine and display the number of random numbers having values
between 1 and 50 and the number having values greater than 50. What do you expect the
output counts to be?

15 (Program) a. Write, compile, and run a C++ program that inputs 10 double-precision numbers
in an array named raw. After these numbers are entered in the array, your program should cycle
through raw 10 times. During each pass through the array, your program should select the lowest
value in raw and place it in the next available slot in an array named sorted. When your
program is finished, the sorted array should contain the numbers in raw in sorted order from
lowest to highest. (Hint: Be sure to reset the lowest value selected during each pass to a very
high number so that it’s not selected again. You need a second for loop in the first for loop to
locate the minimum value for each pass.)

b. The method used in Exercise 15a to sort the values in the array is inefficient. Can you
determine why? What might be a better method of sorting the numbers in an array?
