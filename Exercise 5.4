1. (Program) a. Using a do-while statement, write, compile, and run a C++ program to accept
a grade. The program should request a grade continuously as long as an invalid grade is
entered. An invalid grade is any grade less than 0 or greater than 100. After a valid grade has
been entered, your program should display the value of the grade entered.

#include <iostream>
using namespace std;
int main()
{
	int grade;
	do{
		cout << "Enter your grade" << endl;
			cin >> grade;
		if (grade > 0 && grade <= 100){
			cout << grade;
		}
	
	} while (grade > 100 || grade < 0);
	

	system("PAUSE");
	return 0;
}

b. Modify the program written for Exercise 1a so that the user is alerted when an invalid grade
has been entered.

#include <iostream>
using namespace std;
int main()
{
	int grade;
	do{
		cout << "Enter your grade" << endl;
			cin >> grade;
		if (grade > 0 && grade <= 100){
			cout << grade;
		}
		else{ cout << "invalid number" << endl; }
	
	} while (grade > 100 || grade < 0);
	

	system("PAUSE");
	return 0;
}

c. Modify the program written for Exercise 1b so that it allows the user to exit the program by
entering the number 999.

#include <iostream>
using namespace std;
int main()
{
	int grade;
	do{
		cout << "Enter your grade" << endl;
			cin >> grade;
		if (grade > 0 && grade <= 100){
			cout << grade;
		}
		else if (grade == 999){
			grade = 10;
		}
		else{ cout << "invalid number" << endl; }
	
	} while (grade > 100 || grade < 0);
	

	system("PAUSE");
	return 0;
}

d. Modify the program written for Exercise 1b so that it automatically terminates after five
invalid grades are entered.

2. (Program) a. Write, compile, and run a C++ program that continuously requests a grade to be
entered. If the grade is less than 0 or greater than 100, your program should print a message
informing the user that an invalid grade has been entered; else, the grade should be added to
a total. When a grade of 999 is entered, the program should exit the repetition loop and compute
and display the average of the valid grades entered.

b. Run the program written in Exercise 2a on a computer and verify the program by using
appropriate test data.

3. (Program) a. Write, compile, and run a C++ program to reverse the digits of a positive integer
number. For example, if the number 8735 is entered, the number displayed should be 5378.
(Hint : Use a do-while statement and continuously strip off and display the number’s units
digit. If the variable num initially contains the number entered, the units digit is obtained as
(numƒ%ƒ10)). After a units digit is displayed, dividing the number by 10 sets up the number
for the next iteration. Therefore, (8735ƒ%ƒ10) is 5 and (8735 / 10) is 873. The do-while
statement should continue as long as the remaining number is not 0.

b. Run the program written in Exercise 3a on a computer and verify the program by using
appropriate test data.

4. (Practice) Repeat any of the exercises in Section 5.3, using a do-while statement rather than
a for statement.
