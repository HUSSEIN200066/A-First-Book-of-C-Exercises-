1. (Program) Include the copy constructor and assignment operator explained in this section in
Program 12.6, and run the program to verify their operation.

#include "stdafx.h" 
#include <iostream>
#include <string>
#pragma warning(disable : 4996)

using namespace std;
// class declaration section
class Book
{
private:
	char *title;   // a pointer to a book title
public:
	Book(char* = '\0');
	Book(Book& oldbook);   // constructor
	void showtitle(void);  // display the title
	void operator =(Book& oldbook);
};

// class implementation section

Book::Book(char* strng)

{
	title = new char[strlen(strng) + 1];  // allocate memory
	strcpy(title, strng);               // store the string
}



Book::Book(Book& oldbook)

{
	cout << "Copy constructor allocating ptr." << endl;
	title = new char[strlen(oldbook.title) + 1];  // allocate new memory
	strcpy(title, oldbook.title);               // copy the title
}



void Book::operator =(Book& oldbook)
{
	if (oldbook.title != NULL)  // check that it exists
		delete(title);           // release existing memory
	title = new char[strlen(oldbook.title) + 1];  // allocate new memory
	strcpy(title, oldbook.title);                 // copy the title
}
void Book::showtitle(void)
{
	cout << title << endl;
	return;
}

int main()
{
	Book book1("Windows Primer");      // create 1st title
	Book book2("A Brief History of Western Civilization");  // 2nd title

	book2 = book1;

	book1.showtitle();  // display book1's title
	book2.showtitle();  // display book2's title

	system("PAUSE");
	return 0;
}

2. (Program) Write a suitable destructor method for Program 12.6.

#include "stdafx.h" 
#include <iostream>
#include <string>
#pragma warning(disable : 4996)

using namespace std;
// class declaration section
class Book
{
private:
	char *title;   // a pointer to a book title
public:
	Book(char* = '\0');
	Book(Book& oldbook);   // constructor
	void showtitle(void);  // display the title
	void operator =(Book& oldbook);
	~Book();
};

// class implementation section

Book::Book(char* strng)

{
	title = new char[strlen(strng) + 1];  // allocate memory
	strcpy(title, strng);               // store the string
}



Book::Book(Book& oldbook)

{
	title = new char[strlen(oldbook.title) + 1];  // allocate new memory
	strcpy(title, oldbook.title);               // copy the title
}



void Book::operator =(Book& oldbook)
{
	if (oldbook.title != NULL)  // check that it exists
		delete(title);           // release existing memory
	title = new char[strlen(oldbook.title) + 1];  // allocate new memory
	strcpy(title, oldbook.title);                 // copy the title
}
void Book::showtitle(void)
{
	cout << title << endl;
	return;
}

Book:: ~Book(void)
{
	cout << "Freeing memory from allocation!" << endl;
	delete title;
}

int main()
{
	Book book1("Windows Primer");      // create 1st title
	Book book2("A Brief History of Western Civilization");  // 2nd title

	book2 = book1;

	book1.showtitle();  // display book1's title
	book2.showtitle();  // display book2's title
	
	book2.~Book();

	system("PAUSE");
	return 0;
}

3. (Program) a. Construct a class named Car containing these four data members: a doubleprecision
variable named engineSize, a character variable named bodyStyle, an integer
variable named colorCode, and a character pointer named vinPtr to a vehicle ID code. The
member functions should include a constructor that provides default values of 0 for each
numeric data member, an X for each character variable, and a NULL for each pointer; a display
function that prints the engine size, body style, color code, and vehicle ID code; and an assignment
operator that performs a memberwise assignment between two Car objects and handles
the pointer member correctly.

Done!!

b. Include the class written for Exercise 3a in a working C++ program that creates two Car
objects; the second object should be assigned the values of the first object.

#include "stdafx.h" 
#include <iostream>
#include <string>
#pragma warning(disable : 4996)

using namespace std;
// class declaration section
class Car
{
private:
	double engineSize;
	char bodyStyle;
	int colorCode;
	char *vinPtr;   // a pointer to a Car vinPtr
public:
	Car(double = 0, char = 'X', int = 0, char* = '\0');
	Car(Car& oldCar);   // constructor
	void showvinPtr(void);  // display the vinPtr
	void operator =(Car& oldCar);
	~Car();
};

// class implementation section

Car::Car(double ee, char bb, int cc, char* strng)

{
	engineSize = ee;
	bodyStyle = bb;
	colorCode = cc;
	vinPtr = new char[strlen(strng) + 1];  // allocate memory
	strcpy(vinPtr, strng);               // store the string
}



Car::Car(Car& oldCar)

{
	engineSize = oldCar.engineSize;
	bodyStyle = oldCar.bodyStyle;
	colorCode = oldCar.colorCode;
	vinPtr = new char[strlen(oldCar.vinPtr) + 1];  // allocate new memory
	strcpy(vinPtr, oldCar.vinPtr);               // copy the vinPtr
}



void Car::operator =(Car& oldCar)
{
	if (oldCar.vinPtr != NULL)  // check that it exists
		delete(vinPtr);           // release existing memory
	vinPtr = new char[strlen(oldCar.vinPtr) + 1];  // allocate new memory
	strcpy(vinPtr, oldCar.vinPtr);                 // copy the vinPtr
}
void Car::showvinPtr(void)
{
	cout << "The car's engine size is " << engineSize << endl;
	cout << "The body style is " << bodyStyle << endl;
	cout << "The color code is " << colorCode << endl;
	cout << "The Car vechicle ID code is " << vinPtr << endl;
	return;
}

Car:: ~Car(void)
{
	cout << "Freeing memory from allocation!" << endl;
	delete vinPtr;
}

int main()
{
	Car Car1(52.23,'A',5,"Ford Focus");      // create 1st vinPtr

	Car Car2 = Car1;

	Car1.showvinPtr();  // display Car1's vinPtr
	Car2.showvinPtr();  // display Car2's vinPtr

	system("PAUSE");
	return 0;
}

4. (Modify) Modify Program 12.6 to include the assignment statement b = a, and then run the
modified program to assess any error messages that occur.



5. (Modify) Using Program 12.6 as a start, write a program that creates five Book objects. The
program should allow the user to enter the five book titles interactively and then display the
titles entered.



6. (Modify) Modify the program written in Exercise 5 so that the program sorts the entered book
titles in alphabetical order before it displays them. (Hint: You have to define a sort routine for
the titles; refer back to Section 7.7.)


