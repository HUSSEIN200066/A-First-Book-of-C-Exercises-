1. (Practice and Modify) a. Enter and run Program 9.5.
#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
using namespace std;
int main()
{
	string filename = "prices.dat";  // put the filename up front
	string descrip;
	double price;
	ifstream inFile;
	inFile.open(filename.c_str());
	if (inFile.fail())  // check for successful open
	{
		cout << "\nThe file was not successfully opened"
			<< "\n Please check that the file currently exists."
			<< endl;
		system("PAUSE");
		exit(1);
	}
	// read and display the file's contents
	inFile >> descrip >> price;
	while (inFile.good()) // check next character
	{
		cout << descrip << ' ' << price << endl;
		inFile >> descrip >> price;
	}
	inFile.close();
	system("PAUSE");
	return 0;
}
b. Modify Program 9.5 to use the expression !inFile.eof() in place of the expression
inFile.good(), and run the program to see whether it operates correctly.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
using namespace std;
int main()
{
	string filename = "prices.dat";  // put the filename up front
	string descrip;
	double price;
	ifstream inFile;
	inFile.open(filename.c_str());
	if (inFile.fail())  // check for successful open
	{
		cout << "\nThe file was not successfully opened"
			<< "\n Please check that the file currently exists."
			<< endl;
		system("PAUSE");
		exit(1);
	}
	// read and display the file's contents
	inFile >> descrip >> price;
	while (!inFile.eof()) // check next character
	{
		cout << descrip << ' ' << price << endl;
		inFile >> descrip >> price;
	}
	inFile.close();
	system("PAUSE");
	return 0;
}

2. (Practice and Modify) a. Enter and run Program 9.6.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
using namespace std;
int main()
{
	string filename = "prices.dat";  // put the filename up front
	string line;
	ifstream inFile;
	inFile.open(filename.c_str());
	if (inFile.fail())  // check for successful open
	{
		cout << "\nThe file was not successfully opened"
			<< "\n Please check that the file currently exists."
			<< endl;
		exit(1);
	}
	// read and display the file's contents
	while (getline(inFile, line))
		cout << line << endl;
	inFile.close();
	return 0;
}

b. Modify Program 9.6 by replacing cout with cerr, and verify that the output for the standard
error file stream is the screen.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
using namespace std;
int main()
{
	string filename = "prices.dat";  // put the filename up front
	string line;
	ifstream inFile;
	inFile.open(filename.c_str());
	if (inFile.fail())  // check for successful open
	{
		cerr << "\nThe file was not successfully opened"
			<< "\n Please check that the file currently exists."
			<< endl;
		exit(1);
	}
	// read and display the file's contents
	while (getline(inFile, line))
		cerr << line << endl;
	inFile.close();
	return 0;
}

c. Modify Program 9.6 by replacing cout with clog, and verify that the output for the standard
log stream is the screen.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
using namespace std;
int main()
{
	string filename = "prices.dat";  // put the filename up front
	string line;
	ifstream inFile;
	inFile.open(filename.c_str());
	if (inFile.fail())  // check for successful open
	{
		clog<< "\nThe file was not successfully opened"
			<< "\n Please check that the file currently exists."
			<< endl;
		system("PAUSE");
		exit(1);
	}
	// read and display the file's contents
	while (getline(inFile, line))
		clog << line << endl;
	inFile.close();
	system("PAUSE");
	return 0;
}

3. (Practice and Modify) a. Write a C++ program that accepts lines of text from the keyboard
and writes each line to a file named text.dat until an empty line is entered. An empty line
is a line with no text thatâ€™s created by pressing the Enter (or Return) key.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename = "text.dat";  // put the filename up front
	ofstream outFile;
	ifstream inFile;
	string i;
	outFile.open(filename.c_str());
	inFile.open(filename.c_str());
	if (outFile.fail())
	{
		cout << "The file was not successfully opened" << endl;
		exit(1);
	}
	// set the output file stream formats
	inFile >> setiosflags(ios::fixed)
		>> setiosflags(ios::showpoint)
		>> setprecision(2);
	// send data to the file
	cout << "Enter the words" << endl;
	cin >> i;
	inFile >> i;

	outFile << i;
	inFile.close();
	outFile.close();
	
	cout << "The file " << filename
		<< " has been successfully written." << endl;
	system("PAUSE");
	return 0;
}

b. Modify Program 9.6 to read and display the data stored in the text.dat file created in
Exercise 3a.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename = "text.dat";  // put the filename up front
	ofstream outFile;
	ifstream inFile;
	string i;
	outFile.open(filename.c_str());
	inFile.open(filename.c_str());
	if (outFile.fail())
	{
		cout << "The file was not successfully opened" << endl;
		exit(1);
	}
	// set the output file stream formats
	inFile >> setiosflags(ios::fixed)
		>> setiosflags(ios::showpoint)
		>> setprecision(2);
	// send data to the file
	cout << "Enter the words" << endl;
	cin >> i;
	inFile >> i;
	cout << i << endl;
	outFile << i;
	inFile.close();
	outFile.close();
	
	cout << "The file " << filename
		<< " has been successfully written." << endl;
	system("PAUSE");
	return 0;
}

4. (Practice) Determine the OS command or procedure your computer provides to display the
contents of a saved file.

The OS comand for windows is "type hope.txt" or "start hope.txt" they will open the contents of a saved file.

5. (Program) a. Create a text file named employee.dat containing the following data:
Anthony       A         10031       11.82         12/18/2010
Burrows       W         10067       12.14         6/9/2011
Fain          B         10083       10.79         5/18/2011
Janney        P         10095       12.57         9/28/2008
Smith         G         10105       9.50          12/20/2006

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename = "employee.dat";  // put the filename up front
	ofstream outFile;
	outFile.open(filename.c_str());
	if (outFile.fail())
	{
		cout << "The file was not successfully opened" << endl;
		exit(1);
	}
	
	// send data to the file
	outFile << "Anthony " << setw(5) << 'A' << setw(10) << 10031 << setw(5) << 11.32 << setw(5) << 12 <<'/'<< 18 <<'/'<< 2010 << endl
		<< "Burrows " << setw(5) << 'W' << setw(10) << 10067 << setw(5) << 12.14 << setw(5) << 6 <<'/'<< 9 <<'/'<< 2011 << endl
		<< "Fain " << setw(5) << 'B' << setw(10) << 10083 << setw(5) << 10.79 << setw(5) << 5 << '/'<< 18 <<'/'<< 2011 << endl
		<< "Janney" << setw(5) << 'P' << setw(10) << 10095 << setw(5) << 12.57 << setw(5) << 9 << '/'<< 28 <<'/'<< 2008 << endl
		<< "Smith" << setw(5) << 'G' << setw(10) << 10105 << setw(5) << 9.50 << setw(5) << 12 <<'/'<< 20 <<'/'<< 2006 << endl;
	outFile.close();
	cout << "The file " << filename
		<< " has been successfully written." << endl;
	system("PAUSE");
	return 0;
}

b. Write a C++ program to read the employee.dat file created in Exercise 5a and produce a
duplicate copy of the file named employee.bak.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename2 = "employee.dak";
	string filename = "employee.dat";  // put the filename up front
	
	string line;
	ifstream inFile;
	ifstream inFile2;
	ofstream outFile;
	inFile.open(filename.c_str());
	inFile2.open(filename2.c_str());
	outFile.open(filename2.c_str());
	if (inFile.fail())  // check for successful open
	{
		cout << "\nThe file was not successfully opened"
			<< "\n Please check that the file currently exists."
			<< endl;
		exit(1);
	}
	// read and copy the file's contents
	while (getline(inFile, line))
	   
		outFile << line;


	    inFile2.close();
	    inFile.close();
		outFile.close();
	system("PAUSE");
	return 0;
}

c. Modify the program written in Exercise 5b to accept the names of the original and duplicate
files as user input.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	//string filename2 = "employee.dak";
	//string filename = "employee.dat";  // put the filename up front
	string filename, filename2;
	cout << "Enter original file name" << endl;
	cin >> filename;
	cout << "Enter duplicate file name" << endl;
	cin >> filename2;
	string line;
	ifstream inFile;
	ifstream inFile2;
	ofstream outFile;
	inFile.open(filename.c_str());
	inFile2.open(filename2.c_str());
	outFile.open(filename2.c_str());
	if (inFile.fail())  // check for successful open
	{
		cout << "\nThe file was not successfully opened"
			<< "\n Please check that the file currently exists."
			<< endl;
		exit(1);
	}
	// read and copy the file's contents
	while (getline(inFile, line))
	   
		outFile << line;


	    inFile2.close();
	    inFile.close();
		outFile.close();
	system("PAUSE");
	return 0;


d. The program written for Exercise 5c always copies data from an original file to a duplicate
file. Whatâ€™s a better method of accepting the original and duplicate filenames, other than
prompting the user for them each time the program runs?

Hard coding the files names works better because it removes the step of inputing the names manually.

6. (Program) a. Write a C++ program that opens a file and displays its contents with line numbers.
That is, the program should print the number 1 before displaying the first line, print the
number 2 before displaying the second line, and so on for each line in the file.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename = "employee.dat";  // put the filename up front
	string line;
	ifstream inFile;
	ofstream outFile;
	inFile.open(filename.c_str());
	outFile.open(filename.c_str());
	if (inFile.fail())  // check for successful open
	{
		cout << "\nThe file was not successfully opened"
			<< "\n Please check that the file currently exists."
			<< endl;
		exit(1);
	}
	// read and copy the file's contents
	for (int i = 1; i < 5; i++){
		cin >> line;
		inFile >> i >> line;
		outFile << i << line << endl;
	}
		inFile.close();
		outFile.close();
	
	system("PAUSE");
	return 0;
}

b. Modify the program written in Exercise 6a to list the fileâ€™s contents on the printer assigned
to your computer.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename = "employee.dat";  // put the filename up front
	string line;
	ifstream inFile;
	ofstream outFile;
	inFile.open(filename.c_str());
	outFile.open(filename.c_str());
	outFile.open("prn");	// This command is outdated.
if (inFile.fail())  // check for successful open
	{
		cout << "\nThe file was not successfully opened"
			<< "\n Please check that the file currently exists."
			<< endl;
		exit(1);
	}
	// read and copy the file's contents
	for (int i = 1; i < 5; i++){
		cin >> line;
		inFile >> i >> line;
		outFile << i << line << endl;
	}
		inFile.close();
		outFile.close();
		
	
	system("PAUSE");
	return 0;
}



7. (Program) a. Create a text file named info.dat containing the following data (without the
headings):
Name              Social Security Number          Hourly Rate             Hours Worked
B Caldwell        555-88-2222                     10.50                    37
D Memcheck        555-77-4444                     12.80                    40
R Potter          555-77-6666                     16.54                    40
W Rosen           555-99-8888                     11.80                    35

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename = "info.dat";  // put the filename up front
	ofstream outFile;
	outFile.open(filename.c_str());
	if (outFile.fail())
	{
		cout << "The file was not successfully opened" << endl;
		exit(1);
	}

	// send data to the file
	outFile << "B Caldwell"  << setw(10) << 555<< "-" <<88<<"-" <<2222 << setw(10) << 10.50 << setw(10) << 37 << endl
		    << "D Memcheck " << setw(10) << 555 << "-" << 77 << "-" << 4444 << setw(10) << 12.80 << setw(10) << 40 << endl
		    << "R Potter " << setw(10) << 555 << "-" << 77 << "-" << 6666 << setw(10) << 16.54 << setw(10) << 40 << endl
		    << "W Roser" << setw(10) << 555 << "-" << 99 << "-" << 8888 << setw(10) << 11.80 << setw(10) << 35 << endl;
		
	outFile.close();
	cout << "The file " << filename
		<< " has been successfully written." << endl;
	system("PAUSE");
	return 0;
}

b. Write a C++ program that reads the data file created in Exercise 7a and computes and displays
a payroll schedule. The output should list the Social Security number, name, and gross
pay for each person, calculating gross pay as Hourly Rate Ã— Hours Worked.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename = "info.dat";  // put the filename up front
	ofstream outFile;
	outFile.open(filename.c_str());
	if (outFile.fail())
	{
		cout << "The file was not successfully opened" << endl;
		exit(1);
	}

	// send data to the file
	double money1 = 10.50 * 37;
	double money2 = 12.80 * 40;
	double money3 = 16.54 * 40;
	double money4 = 11.80 * 35;
	outFile << "B Caldwell"  << setw(10) << 555<< "-" <<88<<"-" <<2222 << setw(10) << money1 << endl
		    << "D Memcheck " << setw(10) << 555 << "-" << 77 << "-" << 4444 << setw(10) << money2 << endl
		    << "R Potter " << setw(10) << 555 << "-" << 77 << "-" << 6666 << setw(10) << money3 << endl
		    << "W Roser" << setw(10) << 555 << "-" << 99 << "-" << 8888 << setw(10) << money4 << endl;
		
	outFile.close();
	cout << "The file " << filename
		<< " has been successfully written." << endl;
	system("PAUSE");
	return 0;
}

8. (Program) a. Create a text file named car.dat containing the following data (without the
headings):
Car Number          Miles Driven           Gallons of Gas Used
54                  250                    19
62                  525                    38
71                  123                    6
85                  1322                   86
97                  235                    14

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename = "car.dat";  // put the filename up front
	ofstream outFile;
	outFile.open(filename.c_str());
	if (outFile.fail())
	{
		cout << "The file was not successfully opened" << endl;
		exit(1);
	}

	// send data to the file

	outFile << 55 << setw(10) << 250 << setw(10) << 19 << endl
		<< 62 << setw(10) << 525 << setw(10) << 38 << endl
		<< 71 << setw(10) << 123 << setw(10) << 6 << endl
		<< 85 << setw(10) << 97 << setw(10) << 86 << endl
		<< 97 << setw(10) << 235 << setw(10) << 14 << endl;
		
	outFile.close();
	cout << "The file " << filename
		<< " has been successfully written." << endl;
	system("PAUSE");
	return 0;
}

b. Write a C++ program that reads the data in the file created in Exercise 8a and displays the
car number, miles driven, gallons of gas used, and miles per gallon (mpg) for each car. The
output should contain the total miles driven, total gallons of gas used, and average mpg for
all cars. These totals should be displayed at the end of the output report.

#include <iostream>
#include <fstream>
#include <cstdlib>   // needed for exit()
#include <string>    // needed for the string class
#include <iomanip>   // needed for formatting
using namespace std;
int main()
{
	string filename = "car.dat";  // put the filename up front
	ofstream outFile;
	outFile.open(filename.c_str());
	if (outFile.fail())
	{
		cout << "The file was not successfully opened" << endl;
		exit(1);
	}

	// send data to the file

	double mpg1 = (250 / 19);
	double mpg2 = (525 / 38);
	double mpg3 = (123 / 6);
	double mpg4 = 97 / 86;
	double mpg5 = 235 / 14;
	double totalmile = 250 + 525 + 123 + 97 + 235;
	double totalgal = 19 + 38 + 6 + 86 + 14;
	double total = mpg1 + mpg2 + mpg3 + mpg4 + mpg5;
	double average = (total / 5);

	outFile << 55 << setw(10) << 250 << setw(10) << 19 <<setw(10) << mpg1 << endl
		<< 62 << setw(10) << 525 << setw(10) << 38 <<setw(10) << mpg2 << endl
		<< 71 << setw(10) << 123 << setw(10) << 6 <<setw(10)<< mpg3 << endl
		<< 85 << setw(10) << 97 << setw(10) << 86 <<setw(10)<< mpg4 << endl
		<< 97 << setw(10) << 235 << setw(10) << 14 << setw(10)<<mpg5 << endl
		<<" Total Miles Driven" << setw(10) << totalmile << endl 
		<< " Totla Gallons of Gas Used" <<setw(10) << totalgal << endl
		<< " Average mpg for all cars" << setw(10) <<average << endl;
		
	outFile.close();
	cout << "The file " << filename
		<< " has been successfully written." << endl;
	system("PAUSE");
	return 0;
}

9. (Program) a. Create a text file named parts.dat with the following data (without the
headings):
Part Number       Initial Amount       Quantity Sold       Minimum Amount
QA310             95                   47                  50
CM145             320                  162                 200
MS514             34                   20                  25
EN212             163                  150                 160



b. Write a C++ program to create an inventory report based on the data in the file created in
Exercise 9a. The display should consist of the part number, current balance, and the amount
needed to bring the inventory to the minimum level. The current balance is the initial
amount minus the quantity sold.



10. (Program) a. Create a text file named pay.dat containing the following data (without the
headings):
Name                  Rate                 Hours
Callaway, G.          16.00                40
Hanson, P.            15.00                48
Lasard, D.            16.50                35
Stillman, W.          12.00                50



b. Write a C++ program that uses the information in the file created in Exercise 10a to produce
the following pay report for each employee:

Name   Pay Rate   Hours   Regular Pay   Overtime Pay   Gross Pay

Compute regular pay as any hours worked up to and including 40 hours multiplied by the pay
rate. Compute overtime pay as any hours worked above 40 hours at a pay rate of 1.5 multiplied
by the regular rate. The gross pay is the sum of regular and overtime pay. At the end of the
report, the program should display the totals of the regular, overtime, and gross pay columns.



11. (Program) a. Store the following data in a file named numbers.dat:
5  96  87  78  93  21  4  92  82  85  87  6  72  69  85  75  81  73



b. Write a C++ program to calculate and display the average of each group of numbers in the
file created in Exercise 11a. The data is arranged in the file so that each group of numbers
is preceded by the number of data items in the group. Therefore, the first number in the
file, 5, indicates that the next five numbers should be grouped together. The number 4
indicates that the following four numbers are a group, and the 6 indicates that the last six
numbers are a group. (Hint: Use a nested loop. The outer loop should terminate when the
end of file has been encountered.)



12. (Program) Write a C++ program that allows users to enter the following information from the
keyboard for each student in a class (up to 20 students) and stores the data in a text file named
grade.dat:

Name  Exam 1 Grade   Exam 2 Grade   Homework Grade    Final Exam Grade

For each student, your program should first calculate a final grade, using this formula:
Final Grade = 0.20 Ã— Exam 1 + 0.20 Ã— Exam 2 + 0.35 Ã— Homework + 0.25 Ã— Final Exam
Then assign a letter grade on the basis of 90â€“100 = A, 80â€“89 = B, 70â€“79 = C, 60â€“69 = D, and
less than 60 = F. All the information, including the final grade and the letter grade, should then
be displayed and written to a file.



13. (Program) A bankâ€™s customer records are to be stored in a file and read into a set of arrays so
that a customerâ€™s record can be accessed randomly by account number. Create the file by
entering five customer records, with each record consisting of an integer account number
(starting with account number 1000), a first name (maximum of 10 characters), a last name
(maximum of 15 characters), and a double-precision number for the account balance.

After the file is created, write a C++ program that requests a user-input account number and
displays the corresponding name and account balance from the file. (Hint: Read the data in the
file into an array, and then search the array for the account number.)



14. (Program) Create a text file with the following data or use the shipped.dat file provided on
this bookâ€™s Web site. The headings arenâ€™t part of the file; they simply indicate what the data
represents.

*See textbook for table*

The format of each line in the file is identical, with fixed-length fields defined as follows:

*See textbook for table*

Using this data file, write a C++ program that reads the file and produces a report listing the
shipped date, part number, first name, last name, and company name.


