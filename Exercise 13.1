1. (Review) Define the following terms:

a. Container - The STL lists and arrays are held in containers
b. Collection - The STL list and arrays are considered collections
c. Data structure - is a container of data organized in a way that facilitates inserting, retrieving, and deleting data.
d. Iterator - are used to spacify the means of accessing list objects, in much the same way as in index does for an array.
e. List - is considered a container that can hold a collection of zero or more items of the same type.
f. Standard Template Library - provides a tested and generic set of easyly used lists that can be maintained in various configurations.

2. (Review) What sequential container types are supported in the STL?

vector, list, deque

3. (Review) What associative container types are supported in the STL?

set, multiset, map, multimap

4. (Practice) For each of the following, define a class containing only a class declaration section
that can be used to create the following objects:

a. An object (known as a student record) containing a student ID number, the number of
credits completed, and a cumulative grade point average

class Students
{
private:
	int ID_number;
	double credits;
	double GPA;

public:
	
};

b. An object (known as a student record) capable of holding a student’s name, date of birth,
number of credits completed, and cumulative grade point average

class Students
{
private:
	string name;
	int date_of_birth;
	double credits;
	double GPA;

public:	
};

c. A mailing list containing a title field, last name field, first name field, two street address
fields, a city field, a state field, and a zip code field

class Mail
{
private:
 string title;
 string last;
 string first;
 string address,address2;
 string city,state,zip;
public:
};

d. A stock object containing the stock’s name, the purchase price, and the date of purchase

class Stock
{
private:
 string name;
 double price;
 string date;
public:
};

e. An inventory object containing an integer part number, a string part description, an integer
number of parts in inventory, and an integer reorder value

class Inventory
{
int partN;
string partD;
int numberP;
int reorderV;
};

5. (Practice) For each class declared in Exercise 4, add a suitable constructor and accessor
method. Test each method to initialize and display the following data:
a. ID Number: 4672
Number of Credits Completed: 68
Grade Point Average: 3.01

#include "stdafx.h" 
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#pragma warning(disable : 4996)
using namespace std;
// class declaration section
class Students
{
private:
	int ID_number;
	double credits;
	double GPA;

public:	
	Students(int = 4672, double = 68, double = 3.01);   // constructor
	void display();
};

// class implementation section
Students::Students(int ii, double cc, double gg)
{
	ID_number = ii;
	credits = cc;
	GPA = gg;
}
void Students::display()
{
	cout << ID_number << endl;	cout << credits << endl;
	cout << GPA << endl;
}
int main()
{
	Students student_record;

	student_record.display();

	system("PAUSE");
	return 0;
}

b. Name: Rhona Karp
Date of Birth: 8/4/60
Number of Credits Completed: 96
Grade Point Average: 3.89

#include "stdafx.h" 
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#pragma warning(disable : 4996)
using namespace std;
// class declaration section
class Students
{
private:
	int day,month,year;
	double credits;
	double GPA;
	string name;

public:	
	Students(int = 8,int = 4, int = 60, double = 96, double = 3.89, string = "Rhona Karp");   // constructor
	void display();
};

// class implementation section
Students::Students(int dd,int mm, int yy, double cc, double gg, string ss)
{
	day = dd;
	month = mm;
	year = yy;
	credits = cc;
	GPA = gg;
	name = ss;
}
void Students::display()
{
	cout << name << endl;
	cout << day << '/' << month << '/'<< year << endl;
	cout << credits << endl;
	cout << GPA << endl;
}
int main()
{
	Students student_record;

	student_record.display();

	system("PAUSE");
	return 0;
}

c. Title: Dr.
Last Name: Kingsley
First Name: Kay
Address 1: Apt. 2B
Address 2: 614 Freeman Street
City: Indianapolis
State: IN
Zip Code: 07030

#include "stdafx.h" 
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#pragma warning(disable : 4996)
using namespace std;
// class declaration section
class Students
{
private:
	string title;

	string last;

	string first;

	string address, address2;

	string city, state, zip;

public:	
	Students(string = "Dr. ", string = " Kingsley ", string = " Kay ", string = "Apt. 2B", string = "614 Freeman Street", string = "Indianpolis", string = "IN", string = "07030");   // constructor
	void display();
};

// class implementation section
Students::Students(string tt, string ll, string ff, string ad1, string ad2, string cc, string ss, string zz)
{
	title = tt;
	last = ll;
	first = ff;
	address = ad1;
	address2 = ad2;
	city = cc;
	state = ss;
	zip = zz;
}
void Students::display()
{
	cout << title << first << last <<endl;
	cout << address << endl;
	cout << address2 << endl;
	cout << city << endl;
	cout << state << endl;
	cout << zip << endl;
	
}
int main()
{
	Students student_record;

	student_record.display();

	system("PAUSE");
	return 0;
}

d. Stock: IBM
Purchase Price: 134.5
Date Purchased: 10/1/2010

#include "stdafx.h" 
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#pragma warning(disable : 4996)
using namespace std;
// class declaration section
class Students
{
private:
	string name;
	double price;
	string date;

public:	
	Students(string = "IBM", double = 134.5, string = "10/1/2010");   // constructor
	void display();
};

// class implementation section
Students::Students(string ii, double pp , string dd)
{
	name = ii;
	price = pp;
	date = dd;
	
}
void Students::display()
{
	cout << name << endl;
	cout << price << endl;
	cout << date << endl;
	
}
int main()
{
	Students student_record;

	student_record.display();

	system("PAUSE");
	return 0;
}

e. Part Number: 16879
Description: Battery
Number in Stock: 10
Reorder Number: 3



6. (Program) a. Write a C++ program that prompts a user to input the current month, day, and
year. Store the data entered in a suitably defined object and display the date in an appropriate
manner.



b. Modify the program written in Exercise 6a to use an object that accepts the current time in
hours, minutes, and seconds.



7. (Program) Define a class capable of creating objects that can store a business’s name, description
of its product or services, address, number of employees, and annual revenue.



8. (Practice) Define a class capable of creating objects for different screw types held in inventory.
Each object should contain a field for an integer inventory number, a double-precision
screw length, a double-precision diameter, the kind of head (Phillips or standard slot), the
material (steel, brass, other), and the cost.



9. (Program) Write a C++ program that defines a class capable of creating objects for storing the
name of a stock, its estimated earnings per share, and its estimated price-to-earnings ratio.
Have the program prompt the user to enter these items for five different stocks. When data
has been entered for a particular stock, have the program compute and display the anticipated
stock price based on the entered earnings and price-per-earnings values. For example, if a user
enters the data XYZ 1.56 12, the anticipated price for a share of XYZ stock is (1.56)*(12)
= $18.72.



