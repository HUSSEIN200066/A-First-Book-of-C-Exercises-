1. (Practice) Enter and run Program 10.5 on your computer.

Done!!

2. (Modify) Modify the main() function in Program 10.5 to create a second room with a length
of 9 and a width of 12. Have the program calculate this new room’s area.

#include <iostream>
using namespace std;
// class declaration section
class RoomType
{
private:
	double length; // declare length as a double variable
	double width;  // declare width as a double variable
public:
	RoomType(double = 0.0, double = 0.0); // the constructor's declaration
	void showRoomValues();
	void setNewRoomValues(double, double);
	double calculateRoomArea();
};
// class implementation section
RoomType::RoomType(double l, double w)  // this is a constructor
{
	length = l;
	width = w;
	cout << "Created a new room object using the default constructor.\n\n";
}
void RoomType::showRoomValues()  // this is an accessor
{
	cout << "  length = " << length
		<< "\n   width = " << width << endl;
}
void RoomType::setNewRoomValues(double l, double w)  // this is a mutator
{
	length = l;
	width = w;
}
double RoomType::calculateRoomArea()  // this performs a calculation
{
	double result = length * width;
	cout << result << endl;
	return result;
}
int main()
{
	RoomType roomOne(12.5, 18.2);  // declare a variable of type RoomType
	cout << "The values for this room are : \n";
	roomOne.showRoomValues();       // use a class method on this object
	cout << "\nThe floor area of this room is : ";
	roomOne.calculateRoomArea();    // use another class method on this object
	roomOne.setNewRoomValues(9, 12);   // call the mutator
	cout << "\n\nThe values for this room have been changed to : \n";
	roomOne.showRoomValues();
	cout << "\nThe floor area of this room is : ";
	roomOne.calculateRoomArea();
	
	cout << endl;

	system("PAUSE");
	return 0;
}

3. (Modify) a. Modify the main() function in Program 10.5 to create four rooms: hall, kitchen,
dining room, and living room. The dimensions for these rooms are as follows:
Hall: length = 12.40, width = 3.5
Kitchen: length = 14, width = 14
Living room: length = 12.4, width = 20
Dining room: length = 14, width = 10.5.
Your program should display the area of each room and the total area of all four rooms combined.

int main()
{
	RoomType roomOne(12.5, 18.2), hall(12.40,20),kitchen(14,14),livingRoom(12.4,20),diningRoom(14,10.5);  // declare a variable of type RoomType
	cout << "The values for this room are : \n";
	roomOne.showRoomValues();       // use a class method on this object
	cout << "\nThe floor area of this room is : ";
	roomOne.calculateRoomArea();    // use another class method on this object
	roomOne.setNewRoomValues(9, 12);   // call the mutator
	cout << "\n\nThe values for this room have been changed to : \n";
	roomOne.showRoomValues();
	cout << "\nThe floor area of this room is : ";
	roomOne.calculateRoomArea();

	hall.showRoomValues();
	kitchen.showRoomValues();
	livingRoom.showRoomValues();
	diningRoom.showRoomValues();

	cout << endl;

	system("PAUSE");
	return 0;
}

4. (Practice) Enter and run Program 10.6 on your computer.

Done!!

5. (Modify) a. Modify the main() function in Program 10.6 to put a second elevator in service
starting at the 5th floor and have a maximum floor of 20. Have this second elevator move to
the 1st floor and then move to the 12th floor.

int main()
{
	Elevator a,b(2,5,20);   // declare 1 object of type Elevator
	a.request(6);
	a.request(3);

	b.request(1);
	b.request(12);

	system("PAUSE");
	return 0;
}

b. Verify that the constructor is called by adding a message in it that’s displayed each time a
new object is created. Run your program to verify its operation.

Elevator::Elevator(int idnum, int cfloor, int maxfloor)
{
	elNum = idnum;
	currentFloor = cfloor;
	highestFloor = maxfloor;

	cout << "Called Verified" << endl;
}

6. (Modify) Modify the main() function in Program 10.6 to use a while loop that calls the
Elevator’s request() method with a random number between 1 and 15. If the random
number is the same as the elevator’s current floor, generate another request. The while loop
should terminate after five valid requests have been made and be satisfied by movement of
the elevator. (Hint: Review Section 6.8 about the use of random numbers.)

int main()
{
	Elevator a, b(2, 5, 20);   // declare 1 object of type Elevator
	
	int total = 0;
	
	while (total < 5)
	{
		double var = rand() % 15 + 1;
	    b.request(var);
	if (var == var){
		b.request(var);
	}
	total++;
    }
	system("PAUSE");
	return 0;
}

7. (Program) Construct a class named Light that simulates a traffic light. The class’s color
attribute should change from Green to Yellow to Red and then back to Green by using the
class’s change() method. When a new Light object is created, its initial color should be Red.

#include <iostream>
using namespace std;
// class declaration section
class Light
{
private:
	int  lightNum;
	int  currentLight;

public:
	Light(int = 1, int = 1);  // constructor
	void change(int);
};
// class implementation section
Light::Light(int lnum, int clight)
{
	lightNum = lnum;
	currentLight = clight;

}
void Light::change(int light)
{
	if (light < 1 || light > 3 || light == currentLight)
		;  // do nothing
	else if (light > currentLight) // move Light up
	 {
		std::cout << "\nLight " << lightNum
			<< " starting at light "<< currentLight << endl;
		while (light > currentLight)
		{
			currentLight++; // add one to current floor
			cout << " Going Up - now at light " << currentLight << endl;
		}
		cout << "Light " << lightNum
			<< " stopping at light " << currentLight << endl;
	}
	else // move Light down
	{
		cout << "\nLight " << lightNum
			<< " starting at light " << currentLight << endl;
		while (light < currentLight)
		{
			currentLight--;   // subtract one from current floor
			cout << " Going Down - now at light " << currentLight << endl;
		}
		cout << "Light " << lightNum
			<< " Stopping at light "<< currentLight << endl;
	}
	if (currentLight == 1){
		cout << "Red" << endl;
	}
	else if (currentLight == 2){
		cout << "Yellow" << endl;
	}
	else{ cout << "Green" << endl; }
	return;
}
int main()
{
	Light a, b(2, 1);   // declare 1 object of type Light
	a.change(2);
	a.change(1);
	a.change(3);
	
	system("PAUSE");
	return 0;
}

8. (Program) a. Construct a class definition to represent an employee of a company. Each
employee is defined by an integer ID number, a double-precision pay rate, and the maximum
number of hours the employee should work each week. The class should provide these services:
the capability to enter data for a new employee, the capability to change data for a new
employee, and the capability to display existing data for a new employee.



b. Include the class definition created for Exercise 8a in a working C++ program that asks the
user to enter data for three employees and then displays the entered data.



c. Modify the program written for Exercise 8b to include a menu that offers the user the following
choices:
1. Add an employee
2. Modify employee data
3. Delete an employee
4. Exit this menu
In response to the user’s choice, the program should initiate an action to implement the
choice.



9. (Program) a. Construct a class definition to represent types of food. A type of food is classified
as basic or prepared. Basic foods are further classified as Dairy, Meat, Fruit, Vegetable,
or Grain. The class should provide these services: the capability to enter data for a new food,
the capability to change data for a new food, and the capability to display existing data for a
new food.



b. Include the class definition created for Exercise 9a in a working C++ program that asks the
user to enter data for four food items and then displays the entered data.



c. Modify the program written for Exercise 9b to include a menu that offers the user the following
choices:
1. Add a food item
2. Modify a food item
3. Delete a food item
4. Exit this menu
In response to the user’s choice, the program should initiate an action to implement the
choice.


