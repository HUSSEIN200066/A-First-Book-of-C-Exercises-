1. (Review) a. Explain how dynamic allocation of memory works.

dynamic allocation of memory, in which the amount of storage to be allocated is assigned, as requested, at runtime
instead of being fixed at compile time. Dynamic allocation of memory is useful when dealing
with lists and objects because it allows expanding the list as new items are added and contracting
the list as items are deleted.

b. Describe the process of creating a dynamically allocated object. Specifically, discuss the
roles of a pointer variable and the new operator in creating a dynamically allocated object.

After an object has been dynamically created, it can be accessed only by using the address
the new operator returns. So like the this pointer, the newly created object’s address must be
stored in a pointer variable

c. Discuss the importance of deleting dynamically allocated objects, and explain what can
happen if these objects aren’t deleted.

Deleting dynamically created objects when their usefulness ends is crucial. Otherwise, as new objects are created,
the computer starts to “eat up” available memory space, especially if the same pointer
is used in creating a new object before the old object is deleted. The reason is that after an
existing object’s address is overwritten with a new object’s address, there’s no way for the
system to reclaim the memory. This condition is referred to as memory leak.

2. (Review) a. Explain what a pointer is.

The variable that stores the address of another variable 

b. For each of the following pointer declarations, identify the pointer variable’s name and
the data type of the object to be accessed when the address in the pointer variable is
dereferenced:
i. Checkout *a;
declares a as the pointer that can store the address
The data type of the object Checkout when dereferenced is a string.

ii. Pump *pointer1;
declares pointer1 as the pointer that can store the address
The data type of the object Pump when dereferenced is a string.

iii. Pump *addr_of_aPump;
declares addr_of_aPump as the pointer that can store the address
The data type of the object Pump when dereferenced is a string.

iv. int *addr_of_int;
declares addr_of_int as the pointer that can store the address
The data type of the object int when dereferenced is a interger.

v. double *b;
declares b as the pointer that can store the address
The data type of the object double when dereferenced is a double-precision interger.

c. If the asterisks were removed from the declarations in Exercise 2b, what would the names
before the semicolon represent?

The name would be a variable that stores a value and not an address. 

3. (Practice) a. Enter and run Program 12.4, but specify the number of objects to be created as
four. Explain why your program outputs the same memory addresses.

#include "stdafx.h" 
#include <iostream>
using namespace std;
// class declaration section
class Checkout
{
private:
	int numItems;
	double arrivalTime;
public:
	Checkout();    // the constructor
	// the following is an inline destructor
	~Checkout()
	{
		cout << "!!!!This Customer object has been deleted !!!!\n";
	};
	void showObject();
	void getItems(){ return; };  // inline do-nothing methods
	void getTime() { return; };  // will be used in Program 12.5
};
// class implementation section
Checkout::Checkout() // constructor
{
	cout << "\n**** A new Customer object has been created ****\n";
	numItems = 5;
	arrivalTime = 2.5;
}
void Checkout::showObject()
{
	cout << "     For this object:\n";
	cout << "    numItems = " << numItems
		<< "   arrivalTime = " << arrivalTime << endl;
	return;
}
int main()
{
	Checkout *anotherTrans;  // pointer to a Checkout object

int i, howMany;
	cout << "Enter the number of transactions to be created : ";
	cin >> howMany;
	for (i = 1; i <= howMany; i++)
	{
		anotherTrans = new Checkout; // create a new Checkout object
		// display the address of the created object
		cout << "The memory address of this object is : " << anotherTrans << endl;
		anotherTrans->showObject();  // display contents of this object
		delete anotherTrans;  // delete the object
	}
	system("pause");
	return 0;
}

// The address remains the same because the memory used is constatantly being deleted and reused.

b. Remove the statement delete anotherTrans; or convert it to a comment (called “commenting
out”), and rerun Program 12.4. Again, make sure to have the program create four
new objects. Explain why the memory addresses now differ for each new object.

The addresses memory locations storage is always allocated and never deleted.

c. Using the results of Exercise 3b, why is it no longer possible to access any of the first three
created objects after the fourth object has been dynamically created? What does this imply
about the previously allocated memory, and why is it a serious flaw in the program?

because they take up memory at run-time which mean that the memory is unchangeable within the code before hand.
This implies that previously allocated memory is non-reusable. 
If the size of the program was to grow large enough there would be no memory slot to save result and the program would crash. 

4. (Practice) Enter and run Program 12.5.

#include "stdafx.h" 
#include <iostream>
#include <ctime>
#include <cmath>
using namespace std;
// Checkout class
// precondition:
//   srand() must be called once before any member method
// post-conditions:
//   getItems() returns an integer random no. of items between 1 and 20
//   getTime() returns an arrival time between 0.0 and 3.0
// class declaration section
class Checkout
{
private:
	// no class variables
public:
	Checkout() { cout << "\n**** A new Customer has arrived ****\n"; };
	~Checkout()
	{
		cout << "!!!!This Customer object has been deleted !!!!\n";
	};
	int getItems(){ return(1 + rand() % 15); };
	double getTime(){ return((double(rand()) / RAND_MAX) * 3); };
};
int main()
{
	Checkout *anotherTrans;  // declare a pointer to a Checkout object
	int i, howMany;
	cout << "Enter the number of simulations to be created : ";
	cin >> howMany;
	srand(time(NULL));
	for (i = 1; i <= howMany; i++)
	{
		// create a new Checkout object
		anotherTrans = new Checkout;
		// use the pointer to access the member methods
		cout << "The arrival time is " << anotherTrans->getTime() << endl;
		cout << "The number of items is " << anotherTrans->getItems() << endl;
		// delete the object
		delete anotherTrans;
	}
	system("pause");
	return 0;
}

5. (Desk check) For the following class, determine what the two member methods accomplish:
#include <iostream>
#include <ctime>
#include <cmath>
using namespace std;

// Coin class
// precondition:
//     srand() must be called once before the flip()method is called
// class declaration section
class Coin
{
  private:
    static int totalHeads;
    static int totalTails;
  public:
    Coin() {cout << “\n**** A new Coin object has been created ****”;};
    ~Coin() {cout << “\n!!!! This Coin object has been deleted !!!!\n”;};
    void flip();
    static void percentages();
};
// static member definition
int Coin::totalHeads = 0;
int Coin::totalTails = 0;
// class implementation section
void Coin::flip()
{
  if( double(rand())/RAND_MAX < 0.5)
  {
    ++totalTails;
    cout << “\nThe coin flip came up tails”;
  }
   else
  {
    ++totalHeads;
    cout << “\nThe coin flip came up heads”;
  }
  return;
}
void Coin::percentages() // this calculates the percentages of
{                        // heads and tails and displays the result
  int tosses = totalHeads + totalTails;
  cout << “\nNumber of coin tosses: “ << tosses;
  cout << “\n   “ << totalHeads << “ Heads      “
       << totalTails << “ Tails\n”;
  cout << “\nHeads came up “ << 100.0 * double(totalHeads)/tosses
       << “ percent of the time.”;
  cout << “\nTails came up “ << 100.0 * double(totalTails)/tosses
       << “ percent of the time.”;
  return;
}  

The two member methods accomplish the result of a coin tose and the percentage that the result of that tose came up heads or tails

6. (Program) a. Compile a program that uses the following main() function with the Coin class
given in Exercise 5:
int main()
{
  Coin *anewCoin;  // declare a pointer to a Coin object
  int i, howMany;
    
  cout << “Enter the number of flips: “;
  cin >> howMany;
  srand(time(NULL));
  for(i = 1; i <= howMany; i++)
  {
    anewCoin = new Coin; // create a new Coin object
    anewCoin->flip();    // flip the coin
    delete anewCoin;     // delete the object
  }
  Coin::percentages();   // call the static member method
  return 0;
}

b. Run the program written for Exercise 6a so that it produces four flips of the coin.

Done!!

7. (Modify) a. Remove all the cout statements from the constructor, destructor, and flip()
methods in the Coin class given in Exercise 5. Then combine the modified class with the
main() function given in Exercise 6a to produce an executable program.

Done!!

b. Run the program written for Exercise 7a three times. On the first run, have your program
simulate flipping the coin 10 times; the second run, 100 times; and the third run, 1000 times.
Make sure each created object is deleted in the while loop.

Done!!

c. What problem can occur if each created object isn’t deleted in your program? Do you think
this problem is serious?

The program could use up all of it memory space causing the program to crash. Yes this is a serious problem if the program is required to cycle though a large number of flips.

8. (Modify) a. Modify the program written for Exercise 6a or 7a to contain a single dynamically
allocated Coin object. It should be created before the for loop is entered and deleted after
the loop completes its execution.



b. Discuss the advantages and disadvantages of using multiple Coin objects compared with
creating a single Coin object.



c. Is using a dynamically created object for the program written for Exercise 7a necessary?



9. (Program) a. Write a program that simulates a customer’s arrival at a gas station and the
amount of gas requested. Each customer should arrive randomly between 1 and 15 minutes
and request between 3 and 15 gallons of gas. The name of your class should be Customer.



b. Include the class written for Exercise 9a in a program that simulates the arrival of 10 customers
(using a while loop). The arrival time and number of gallons of gas each customer
requests should be displayed. After the last customer, your program should display the total
number of gallons requested.



10. (Modify) a. Modify the class written for Exercise 9a to include the grade of gas. Assume there
are three grades of gas: 87 octane, 93 octane, and 97 octane.



b. Include the class written for Exercise 10a in a program that simulates the arrival of 10 customers
(using a while loop). The arrival time, number of gallons of gas each customer
requests, and octane rating of the gas should be displayed. After the last customer, your
program should display the total number of gallons requested for each grade of gas.



c. What does your simulation assume about the comparative desirability of each grade of gas?
Is this assumption realistic?



d. Based on your answer to Exercise 10c, what are the implications of using the simulation to
determine how much of each grade of gas to supply to a gas station?



