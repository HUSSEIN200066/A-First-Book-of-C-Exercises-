1. (Practice) Enter and run Program 11.4.

#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;
// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012);    // constructor
	Date operator=(const Date &);  // assignment operator prototype
	void showDate();        // member method to display a date
};
// class implementation section
Date::Date(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
}
//The new assignment operator returns an object of type Date
Date Date::operator=(const Date& newdate)
{
	day = newdate.day;        // assign the day
	month = newdate.month;    // assign the month
	year = newdate.year;      // assign the year
	return *this;
}
void Date::showDate()
{
	cout << setfill('0')
		<< setw(2) << month << '/'
		<< setw(2) << day << '/'
		<< setw(2) << year % 100;
	return;
}
int main()
{
	Date a(4, 1, 1999), b(14, 18, 2012), c(1, 1, 2014); // declare three objects

cout << "Before assignment a's date value is ";
		a.showDate();
	cout << "\nBefore assignment b's date value is ";
		b.showDate();
	cout << "\nBefore assignment c's date value is ";
		c.showDate();
	a = b = c;    // multiple assignment
	cout << "\n\nAfter assignment a's date value is ";
		a.showDate();
	cout << "\nAfter assignment b's date value is ";
		b.showDate();
	cout << "\nAfter assignment c's date value is ";
		c.showDate();
	cout << endl;
	system("pause");
	return 0;
}

2. (Modify) a. Modify all the member methods in Program 11.4 to use the this pointer. For
example, the expression month = mm should be replaced by this->month = mm.

Done!!

b. Run the program written for Exercise 2a to verify that your modified program produces the
same output as Program 11.4.

#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;
// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012);    // constructor
	Date operator=(const Date &);  // assignment operator prototype
	void showDate();        // member method to display a date
};
// class implementation section
Date::Date(int mm, int dd, int yyyy)
{
	this->month = mm;
	this->day = dd;
	this->year = yyyy;
}
//The new assignment operator returns an object of type Date
Date Date::operator=(const Date& newdate)
{
	this->day = newdate.day;        // assign the day
	this->month = newdate.month;    // assign the month
	this->year = newdate.year;      // assign the year
	return *this;
}
void Date::showDate()
{
	cout << setfill('0')
		<< setw(2) << this->month << '/'
		<< setw(2) << this->day << '/'
		<< setw(2) << this->year % 100;
	return;
}
int main()
{
	Date a(4, 1, 1999), b(14, 18, 2012), c(1, 1, 2014); // declare three objects
	cout << "Before assignment a's date value is ";
		a.showDate();
	cout << "\nBefore assignment b's date value is ";
		b.showDate();
	cout << "\nBefore assignment c's date value is ";
		c.showDate();
	a = b = c;    // multiple assignment
	cout << "\n\nAfter assignment a's date value is ";
		a.showDate();
	cout << "\nAfter assignment b's date value is ";
		b.showDate();
	cout << "\nAfter assignment c's date value is ";
		c.showDate();
	cout << endl;
	system("pause");
	return 0;
}

3. (Practice) Enter and run Program 11.5.

// Exercise.cpp : Defines the entry point for the console application.
#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;
// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012);   // constructor
	void showDate();      // method to display a date
	void swap(Date *);    // method to swap two dates
};
// class implementation section
Date::Date(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
}
void Date::showDate()
{
	cout << setfill('0')
		<< setw(2) << month << '/'
		<< setw(2) << day << '/'
		<< setw(2) << year % 100;
	return;
}
void Date::swap(Date *temp) // method to swap two dates
{
	int tempstore;
	// swap the day member
	tempstore = temp->day;
	temp->day = day;
	day = tempstore;
	// swap the month member
	tempstore = temp->month;
	temp->month = month;
	month = tempstore;
	// swap the year member
	tempstore = temp->year;
	temp->year = year;
	year = tempstore;
	return;
}
int main()
{
	Date oldDate(4, 3, 1999);
	Date newDate(12, 18, 2012);

	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.showDate();
	newDate.swap(&oldDate);  // swap dates by passing an address
	cout << "\n\nAfter the swap : \n" << endl;
	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.showDate();
	cout << endl;
	system("pause");
	return 0;
}

4. (Modify) a. Modify Program 11.5 to use the last version of swap() shown in this section.
Make sure to modify the method prototype for swap() and the call statement.

Done!!

b. Run the program written for Exercise 4a to verify that the swap() method using a reference
argument produces the same result as Program 11.5.

#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;
// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012);   // constructor
	void showDate();      // method to display a date
	void swap(Date&);    // method to swap two dates
};
// class implementation section
Date::Date(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
}
void Date::showDate()
{
	cout << setfill('0')
		<< setw(2) << month << '/'
		<< setw(2) << day << '/'
		<< setw(2) << year % 100;
	return;
}
void Date::swap(Date& temp) // method to swap two dates
{
	int tempstore;
	// swap the day member
	tempstore = temp.day;
	temp.day = day;
	day = tempstore;
	// swap the month member
	tempstore = temp.month;
	temp.month = month;
	month = tempstore;
	// swap the year member
	tempstore = temp.year;
	temp.year = year;
	year = tempstore;
	return;
}

int main()
{
	Date oldDate(4, 3, 1999);
	Date newDate(12, 18, 2012);

	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.showDate();
	newDate.swap(oldDate);  // swap dates by passing an address
	cout << "\n\nAfter the swap : \n" << endl;
	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.showDate();
	cout << endl;
	system("pause");
	return 0;
}

5. (Desk check) In place of the prototype and method header for swap() used in Program 11.5,
a student used the following:
void swap(Date);   // method prototype
void Date::swap(Date temp)  // method header
a. Determine what Program 11.5 will produce if these two changes are made.

The program will display the first Date twice and none of the dates will be swaped

b. Verify your answer to Exercise 5a by making the changes and running the modified program.

//Done!!
#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;
// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012);   // constructor
	void showDate();      // method to display a date
	void swap(Date);    // method to swap two dates
};
// class implementation section
Date::Date(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
}
void Date::showDate()
{
	cout << setfill('0')
		<< setw(2) << month << '/'
		<< setw(2) << day << '/'
		<< setw(2) << year % 100;
	return;
}
void Date::swap(Date temp) // method to swap two dates
{
	int tempstore;
	// swap the day member
	tempstore = temp.day;
	temp.day = day;
	day = tempstore;
	// swap the month member
	tempstore = temp.month;
	temp.month = month;
	month = tempstore;
	// swap the year member
	tempstore = temp.year;
	temp.year = year;
	year = tempstore;
	return;
}

int main()
{
	Date oldDate(4, 3, 1999);
	Date newDate(12, 18, 2012);

	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.showDate();
	newDate.swap(oldDate);  // swap dates by passing an address
	cout << "\n\nAfter the swap : \n" << endl;
	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.showDate();
	cout << endl;
	system("pause");
	return 0;
}

6. (Desk check) a. Determine what the following method does when called by the statement
newDate.addSixMonths(&oldDate);:
void Date::addSixMonths(Date *pt)  //method to add 6 months
{
  pt->month = pt->month + 6;       // add 6 months to the date
  //adjust the “pointed to” date's month and year
  if(pt->month > 12) // adjust the month and year
  {
    pt->month = pt->month - 12;
    pt->year++;  //add 1 to the year
  }
    day = pt->day;
  month=pt->month;
  year = pt->year;
  return;
}

*This function adds 6 months to one or both Dates based on it's location witin the main function.

b. Include the addSixMonths() method given in Exercise 6a in Program 11.5 and verify your
answer to Exercise 6a.

#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;
// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012);   // constructor
	void showDate();      // method to display a date
	void swap(Date&);    // method to swap two dates
	void addSixMonths(Date*);
	
};
// class implementation section
Date::Date(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
}
void Date::showDate()
{
	cout << setfill('0')
		<< setw(2) << month << '/'
		<< setw(2) << day << '/'
		<< setw(2) << year % 100;
	return;
}
void Date::swap(Date& temp) // method to swap two dates
{
	int tempstore;
	// swap the day member
	tempstore = temp.day;
	temp.day = day;
	day = tempstore;
	// swap the month member
	tempstore = temp.month;
	temp.month = month;
	month = tempstore;
	// swap the year member
	tempstore = temp.year;
	temp.year = year;
	year = tempstore;
	return;
}

void Date::addSixMonths(Date *pt) //method to add 6 months
{
	pt->month = pt->month + 6;       // add 6 months to the date
	//adjust the “pointed to” date's month and year
	if (pt->month > 12) // adjust the month and year
	{
		pt->month = pt->month - 12;
		pt->year++;  //add 1 to the year
	}

	day = pt->day;
    month = pt->month;
	year = pt->year;
	return;
}

int main()
{
	Date oldDate(4, 3, 1999);
	Date newDate(12, 18, 2012);

	
	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.showDate();
	newDate.swap(oldDate);  // swap dates by passing an address
	cout << "\n\nAfter the swap : \n" << endl;
	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.addSixMonths(&oldDate);
	newDate.showDate();
	cout << endl;
	
	system("pause");
	return 0;
}

7. (Modify) a. Modify the addSixMonths() method given in Exercise 6a to use a reference
argument rather than a pointer.

Done!!

b. Include the addSixMonths() method written for Exercise 7a in Program 11.5 and verify
that this method works as expected.

#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;
// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012);   // constructor
	void showDate();      // method to display a date
	void swap(Date&);    // method to swap two dates
	void addSixMonths(Date&);
	
};
// class implementation section
Date::Date(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
}
void Date::showDate()
{
	cout << setfill('0')
		<< setw(2) << month << '/'
		<< setw(2) << day << '/'
		<< setw(2) << year % 100;
	return;
}
void Date::swap(Date& temp) // method to swap two dates
{
	int tempstore;
	// swap the day member
	tempstore = temp.day;
	temp.day = day;
	day = tempstore;
	// swap the month member
	tempstore = temp.month;
	temp.month = month;
	month = tempstore;
	// swap the year member
	tempstore = temp.year;
	temp.year = year;
	year = tempstore;
	return;
}

void Date::addSixMonths(Date& pt) //method to add 6 months
{
	pt.month = pt.month + 6;       // add 6 months to the date
	//adjust the “pointed to” date's month and year
	if (pt.month > 12) // adjust the month and year
	{
		pt.month = pt.month - 12;
		pt.year++;  //add 1 to the year
	}

	day = pt.day;
    month = pt.month;
	year = pt.year;
	return;
}

int main()
{
	Date oldDate(4, 3, 1999);
	Date newDate(12, 18, 2012);

	
	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.showDate();
	newDate.swap(oldDate);  // swap dates by passing an address
	cout << "\n\nAfter the swap : \n" << endl;
	cout << "The date stored in oldDate is ";
	oldDate.showDate();
	cout << "\nThe date stored in newDate is ";
	newDate.addSixMonths(oldDate);
	newDate.showDate();
	cout << endl;
	
	system("pause");
	return 0;
}

8. (Modify) a. Modify the addSixMonths() method given in Exercise 6a so that it doesn’t alter
the data values in the passed object. Do this by passing a copy of oldDate (rather than a
pointer or a reference) to the method.



b. Include the addSixMonths() method written for Exercise 8a in Program 11.5 and verify
that this method works as expected.


