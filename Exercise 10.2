1. (Review) Define the following terms: 
a. Class - the combination of data and associated operations
b. Object - are created from classes
c. Declaration section -  declares both the data types and finctions for the class
d. Implementation section - defines the functions whose prototypes have been declared in the declartion section
e. Instance variable - variables lised in the class declaration 
f. Member method - functions listed in the class declartion
g. Data member - variables listed in the class declaration
h. Constructor -  is any method with the same name as it class
i. Class instance - is an object
j. Services - another name for the operations defined in a class implementation section
k. Methods - variable listed in the class declartion
l. Interface - consists of a class's public member method declaarations and any supporting commands

2. (Practice) Write a class declaration section for each of the following specifications. In each
case, include a prototype for a constructor and a member method named showData() that can
be used to display data member values.
a. A class named Time that has integer data members named secs, mins, and hours

class Time
{
 private:
  int hour;
  int minute;
  int seconds;
 public:
  Time(int =7, int = 40, int = 25);
  void setTime(int,int,int);
  void showTime();
};
  
b. A class named Complex that has double-precision data members named real and imaginary

class Complex
{
private:
 double real;
 double imaginary;
public:
 Complex(double = 5, double = 15);
 void setComplex(double,double);
 void showComplex();
 };

c. A class named Circle that has integer data members named xcenter and ycenter and a double-precision data member named radius

class Circle
{
 private:
  int xcenter;
  int ycenter;
  double radius;
 public:
   Circle(int = 5, int = 5, double = 3);
   void setCircle(int,int,double);
   void showCircle();
};

d. A class named System that has character data members named computer, printer, and screen, each capable of holding 30 characters (including the end-of-string NULL),
and double-precision data members named compPrice, printPrice, and scrnPrice

class System
{
 private:
  char computer;
  char printer;
  char screen;
  double compPrice;
  double printPrice;
  double scrnPrice;
 public:
  System(char = Dell,double = 500, char = HP, double = 300, char = Dell, double = 900);
  void setSystem(char,double,char,double,char,double);
  void showSystem();
};
 
3. (Practice) a. Construct a class implementation section for the constructor and showData()
member methods corresponding to the class declaration created for Exercise 2a.

// class implementation section	
Time::Time(int h, int m, int s){
	hour = h;
	minute = m;
	seconds = s;
}

void Time::setTime(int h, int m, int s){
	hour = h;
	minute = m;
	seconds = s;
}

void Time::showTime()
{
	cout << "The time is ";
	cout << setfill('0')
		<< setw(2) << hour << ':'
		<< setw(2) << minute << ':'
		<< setw(2) << seconds << endl;

	return;

}

b. Construct a class implementation section for the constructor and showData() methods corresponding
to the class declaration created for Exercise 2b.

// class implementation section	
Complex::Complex(double r, double i){
	real = r;
	imaginary = i;
}

void Complex::setComplex(double r , double i){
	real = r;
	imaginary = i;
}

void Complex::showComplex()
{
	cout << "The Complex number is ";
	cout << setfill('0')
		<< setw(2) << real << '+'
		<< setw(2) << imaginary << 'i' << endl;
		

	return;

}

c. Construct a class implementation section for the constructor and showData() methods
corresponding to the class declaration created for Exercise 2c.

// class implementation section	
Circle::Circle(int x, int y, double r){
	xcenter = x;
	ycenter = y;
	radius = r;
}

void Circle::setCircle(int x, int y, double r){
	xcenter = x;
	ycenter = y;
	radius = r;
}

void Circle::showCircle()
{
	cout << "The Circle x,y and radius are ";
	cout << setfill('0')
		<< setw(2) << xcenter << ','
		<< setw(2) << ycenter << " and the radius " 
		<< setw(2) << radius << endl;
		
	return;

}

d. Construct a class implementation section for the constructor and showData() methods corresponding
to the class declaration created for Exercise 2d.

// class implementation section	
System::System(char c, double cp, char p, double pp, char s, double sp){
	computer = c;
	compPrice = cp;
	printer = p;
	printPrice = pp;
	screen = s;
	scrnPrice = sp;
}

void System::setSystem(char c, double cp, char p, double pp, char s, double sp){
	computer = c;
	compPrice = cp;
	printer = p;
	printPrice = pp;
	screen = s;
	scrnPrice = sp;
}

void System::showSystem()
{
	cout << "The Electroic's prices are";
	cout << setw(2) << computer << " $"
		 << setw(3) << compPrice << " Show Printer " 
		 << setw(2) << printer << " $"
		 << setw(3) << printPrice << "Show Screen"
		 << setw(2) << screen << " $"
		 << setw(3) << scrnPrice << endl;
		
	return;

}

4. (Program) a. Include the class declaration and implementation sections prepared for
Exercises 2a and 3a in a complete working program.

#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;

//class declaration section
class Time
{
private:
		int hour;
		int minute;
		int seconds;
public:
		Time(int = 7, int = 40, int = 25); // constructor
		void setTime(int, int, int); // member method to copy time
		void showTime();             // member method to display time
};
// class implementation section	
Time::Time(int h, int m, int s){
	hour = h;
	minute = m;
	seconds = s;
}

void Time::setTime(int h, int m, int s){
	hour = h;
	minute = m;
	seconds = s;
}

void Time::showTime()
{
	cout << "The time is ";
	cout << setfill('0')
		<< setw(2) << hour << ':'
		<< setw(2) << minute << ':'
		<< setw(2) << seconds << endl;

	return;

}
	
int main(){
	Time a, b, c(10, 3, 34);
	b.setTime(10, 9, 45);
	a.showTime();
	b.showTime();
	c.showTime();

	system("PAUSE");
	return 0;
}

b. Include the class declaration and implementation sections prepared for Exercises 2b and 3b
in a complete working program.

#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;

//class declaration section
class Complex
{
private:
	double real;
	double imaginary;
public:
	Complex(double = 5, double = 15);
	void setComplex(double, double);
	void showComplex();
};
// class implementation section	
Complex::Complex(double r, double i){
	real = r;
	imaginary = i;
}

void Complex::setComplex(double r , double i){
	real = r;
	imaginary = i;
}

void Complex::showComplex()
{
	cout << "The Complex number is ";
	cout << setfill('0')
		<< setw(2) << real << '+'
		<< setw(2) << imaginary << 'i' << endl;
		

	return;

}
	
int main(){
	Complex a, b, c( 3, 34);
	b.setComplex( 9, 45);
	a.showComplex();
	b.showComplex();
	c.showComplex();

	system("PAUSE");
	return 0;
}

c. Include the class declaration and implementation sections prepared for Exercises 2c and 3c
in a complete working program.

#include <iostream>
#include <iomanip>
using namespace std;

//class declaration section
class Circle
{
private:
		int xcenter;
		int ycenter;
		double radius;
public:
		Circle(int = 5, int = 5, double = 5);
		void setCircle(int, int, double);
		void showCircle();
};
// class implementation section	
Circle::Circle(int x, int y, double r){
	xcenter = x;
	ycenter = y;
	radius = r;
}

void Circle::setCircle(int x, int y, double r){
	xcenter = x;
	ycenter = y;
	radius = r;
}

void Circle::showCircle()
{
	cout << "The Circle x,y and radius are ";
	cout << setfill('0')
		<< setw(2) << xcenter << ','
		<< setw(2) << ycenter << " and the radius " 
		<< setw(2) << radius << endl;
		
	return;

}
	
int main(){
	Circle a, b, c( 3, 4, 5.23);
	b.setCircle( 9, 4, 8.34);
	a.showCircle();
	b.showCircle();
	c.showCircle();

	system("PAUSE");
	return 0;
}

d. Include the class declaration and implementation sections prepared for Exercises 2d and 3d
in a complete working program.

#include <iostream>
#include <iomanip>
using namespace std;

//class declaration section
class System

{

private:
	char computer;
	char printer;
	char screen;
	double compPrice;
	double printPrice;
	double scrnPrice;
public:

	System(char = 'D', double = 500, char = 'H', double = 300, char = 'D', double = 900);
	void setSystem(char, double, char, double, char, double);
	void showSystem();

};
// class implementation section	
System::System(char c, double cp, char p, double pp, char s, double sp){
	computer = c;
	compPrice = cp;
	printer = p;
	printPrice = pp;
	screen = s;
	scrnPrice = sp;
}

void System::setSystem(char c, double cp, char p, double pp, char s, double sp){
	computer = c;
	compPrice = cp;
	printer = p;
	printPrice = pp;
	screen = s;
	scrnPrice = sp;
}

void System::showSystem()
{
	cout << "The Electroic's prices are";
	cout << setw(2) << computer << " $"
		 << setw(3) << compPrice << " Show Printer " 

<< setw(2) << printer << " $"
		 << setw(3) << printPrice << "Show Screen"
		 << setw(2) << screen << " $"
		 << setw(3) << scrnPrice << endl;
		
	return;

}
	
int main(){
	System a, b, c( 'A', 400,'B', 500, 'C', 100);
	b.setSystem( 'D',900,'E', 400, 'F', 600);
	a.showSystem();
	b.showSystem();
	c.showSystem();

	system("PAUSE");
	return 0;
}

5. (Desk check) Determine the errors in the following class declaration section:
class Employee
{
public:
  int empnum;
  char code;
private:
  class(int = 0); // This line of code does not create a proper contructor
  void showemp(int, char);
};
---------Corrected Code------------
class Employee
{
public:
 int empnum;
 char code;
private:
 Employee(int = 0, char = 'E');
 void showemp(int, char);
};

6. (Modify) a. Add another member method named convert() to Program 10.1 that does the
following: The method should access the month, year, and day data members and display and
then return an integer calculated as year × 10000 + month × 100 + day. For example, if the date
is 4/1/2014, the returned value is 20140401. (Dates in this form are useful when performing
sorts because placing the numbers in numerical order automatically places the corresponding
dates in chronological order.)

// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012); // constructor
	void setDate(int, int, int);   // member method to copy a date
	void showDate();               // member method to display a date
	int convert();              //converts the dates to a sorting order
};
// class implementation section
int Date::convert()
{
	
	int con = year * 10000 + month * 100 + day;

	return con;
}

b. Include the modified Date class constructed for Exercise 6a in a complete C++ program.

#include <iostream>
#include <iomanip>
using namespace std;

// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012); // constructor
	void setDate(int, int, int);   // member method to copy a date
	void showDate();               // member method to display a date
	int convert();              //converts the dates to a sorting order
};
// class implementation section
Date::Date(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
}
void Date::setDate(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
	return;
}
void Date::showDate()
{
	cout << "The date is ";
	cout << setfill('0')
		<< setw(2) << month << '/'
		<< setw(2) << day << '/'
		<< setw(2) << year % 100; // extract the last 2 year digits
	cout << endl;
	return;
}
int Date::convert()
{
	
	int con = year * 10000 + month * 100 + day;

	return con;
}
int main()
{
	Date a, b, c(4, 1, 2000),d;  // declare 3 objects
	b.setDate(12, 25, 2009);  // assign values to b's data members
	a.showDate();           // display object a's values
	b.showDate();           // display object b's values
	c.showDate();           // display object c's values

	cout << d.convert()<< endl;

	system("PAUSE");
	return 0;
}

7. (Modify) a. Add to Program 10.1’s class definition an additional member method named
leapyr() that returns a true if the year is a leap year and a false if it’s not a leap year. A leap
year is any year that’s evenly divisible by 4 but not by 100, with the exception that all years
evenly divisible by 400 are leap years. For example, the year 1996 is a leap year because it’s
evenly divisible by 4 and not evenly divisible by 100. The year 2000 is a leap year because
it’s evenly divisible by 400.

class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012); // constructor
	void setDate(int, int, int);   // member method to copy a date
	void showDate();               // member method to display a date
	bool leapyr();              //converts the dates to a sorting order
};

bool Date::leapyr(){
	if ((year % 4) == 0 && (year % 100) != 0 || (year % 400) == 0){
		cout << "This year is a leap year" << endl;
		return true;
	}
	else {
		cout << "This is not a leap year" << endl;
		return false;
	}
}

b. Include the class definition constructed for Exercise 7a in a complete C++ program. The
main() function should display the message The year is a leap year or the message
The year is not a leap year (depending on the Date object’s year value).

#include <iostream>
#include <iomanip>
using namespace std;

// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 7, int = 4, int = 2012); // constructor
	void setDate(int, int, int);   // member method to copy a date
	void showDate();               // member method to display a date
	bool leapyr();              //converts the dates to a sorting order
};
// class implementation section
Date::Date(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
}
void Date::setDate(int mm, int dd, int yyyy)
{
	month = mm;
	day = dd;
	year = yyyy;
	return;
}
void Date::showDate()
{
	cout << "The date is ";
	cout << setfill('0')
		<< setw(2) << month << '/'
		<< setw(2) << day << '/'
		<< setw(2) << year % 100; // extract the last 2 year digits
	cout << endl;
	return;
}

bool Date::leapyr(){
	if ((year % 4) == 0 && (year % 100) != 0 || (year % 400) == 0){
		cout << "This year is a leap year" << endl;
		return true;
	}
	else {
		cout << "This is not a leap year" << endl;
		return false;
	}
}

int main()
{
	Date a, b, c(4, 1, 2000);  // declare 3 objects
	b.setDate(12, 25, 2009);  // assign values to b's data members
	a.showDate();           // display object a's values
	b.showDate();           // display object b's values
	c.showDate();           // display object c's values

	c.leapyr();
	a.leapyr();
	b.leapyr();


	system("PAUSE");
	return 0;
}

8. (Modify) a. Add a member method named dayOfWeek() to Program 10.1’s class definition
that determines the day of the week for any Date object. An algorithm for determining the day
of the week, known as Zeller’s algorithm, is the following:
If mm is less than 3
mm = mm + 12 and yyyy = yyyy - 1
Endif
Set century = int(yyyy/100)
Set year = yyyy % 100
Set T = dd + int(26 * (mm + 1)/10) + year + int(year / 4)
int(century / 4) - 2 * century
Set DayOfWeek = T % 7
If DayOfWeek is less than 0
DayOfWeek = DayOfWeek + 7
Endif
Using this algorithm, the variable DayOfWeek has a value of 0 if the date is a Saturday, 1 if a
Sunday, and so forth.



b. Include the class definition constructed for Exercise 8a in a complete C++ program. The
main() function should display the name of the day (Sun, Mon, Tue, and so on) for the
Date object being tested.



9. (Program) a. Construct a class named Rectangle that has double-precision data members
named length and width. The class should have member methods named perimeter() and
area() to calculate a rectangle’s perimeter and area, a member method named setData() to
set a rectangle’s length and width, and a member method named showData() that displays a
rectangle’s length, width, perimeter, and area.



b. Include the Rectangle class constructed in Exercise 9a in a working C++ program.



10. (Modify) a. Modify the Date class defined in Program 10.1 to include a nextDay() method
that increments a date by one day. Test your method to ensure that it increments days into a
new month and into a new year correctly.



b. Modify the Date class defined in Program 10.1 to include a priorDay() method that decrements
a date by one day. Test your method to ensure that it decrements days into a prior
month and into a prior year correctly.



11. (Modify) Modify the Date class in Program 10.1 to contain a method that compares two Date
objects and returns the larger of the two. The method should be written according to the following
algorithm:
Accept two Date values as parameters
Determine the later date by using the following procedure:
Convert each date into an integer value having the form yyyymmdd
(This can be accomplished with the formula year * 10000 + month * 100 + day)
Compare the corresponding integers for each date
The larger integer corresponds to the later date
Return the later date


