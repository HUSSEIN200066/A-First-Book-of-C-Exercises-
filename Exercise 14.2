1. (Practice) Enter and run Program 14.8.

//Done!!

#include "stdafx.h" 
#include <iostream>
#include <string>
#include <cctype>
using namespace std;
int main()
{
	string str = "This - 123 / is 567 A ? <6245> Test!";
	char nextChar;
	int i;
	int numLetters = 0, numDigits = 0, numOthers = 0;
	cout << "The original string is : " << str
		<< "\nThis string contains " << int(str.length())
		<< " characters, " << " which consist of" << endl;
	// check each character in the string
	for (i = 0; i < int(str.length()); i++)
	{
		nextChar = str.at(i);  // get a character
		if (isalpha(nextChar))
			numLetters++;
		else if (isdigit(nextChar))
			numDigits++;
		else
			numOthers++;
	}
	cout << "     " << numLetters << " letters" << endl;
	cout << "     " << numDigits << " digits" << endl;
	cout << "     " << numOthers << " other characters." << endl;
	cin.ignore();
	system("PAUSE");
	return 0;
}

2. (Practice) Enter and run Program 14.9.

//Done!!
#include "stdafx.h" 
#include <iostream>
#include <string>
using namespace std;
int main()
{
	int i;
	string str;
	cout << "Type in any sequence of characters : ";
	getline(cin, str);
	// cycle through all elements of the string
	for (i = 0; i < int(str.length()); i++)
		str[i] = toupper(str[i]);
	cout << "The characters just entered, in uppercase, are: "
		<< str << endl;

	system("PAUSE");
	return 0;
}

3. (Program) Write a C++ program that counts the number of words in a string. A word is
encountered whenever a transition from a blank space to a nonblank character is encountered.
The string contains only words separated by blank spaces.

#include "stdafx.h" 
#include <iostream>
#include <string>
using namespace std;
int main()
{
	int i;
	string str;
	int words = 0;
	cout << "Type in any sequence of characters : ";
	getline(cin, str);
	// cycle through all elements of the string
	for (i = 0; i < int(str.length()); i++){
		if (str.at(i) == ' '){
			words++;
		}
	}
	cout << "The number of words are " << words << endl;

	system("PAUSE");
	return 0;
}

4. (Practice) Generate 10 random numbers in the range 0 to 129. (If necessary, review Section 6.8
for how to do this.) If the number represents a printable character, print the character with a
message that indicates the following:
The character is a lowercase letter.
The character is an uppercase letter.
The character is a digit.
The character is a space.
If the character is none of these, display its value in integer format.

#include "stdafx.h" 
#include <iostream>
#include <string>
using namespace std;
int main()
{
	int i,j;
	string str;
	
	// cycle through all elements of the string
	for (i = 0; i < 10; i++){
		j = rand() % 129;
		str = (char)(j);

		if (j >= 65 && j <= 90){
			cout << "The character is an uppercase letter. " << endl;
			cout << str << endl;
		}
		else if (j >= 97 && j <= 122){
			cout << "The character is a lowercase letter. " << endl;
			cout << str << endl;
		}
		else if (j >= 48 && j <= 57){
			cout << "The character is a digit. " << endl;
			cout << str << endl;
		}
		else if (j == 32){
		cout << "The character is a space" << endl;
		cout << str << endl;
	    }
		else {
			cout << "The character is none of these" << endl;
			cout << j << endl;
		}
	}
	system("PAUSE");
	return 0;
}

5. (Practice) a. Write a function named reverse() that returns a string in reverse order without
using the string class’s length() method.

#include "stdafx.h" 
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

void reverse(string str) {
	reverse(str.begin(), str.end());
	cout << str << endl;
}

b. Write a simple main() function to test the reverse() function written for Exercise 5a.

int main()
{	

    reverse("Awesome");
	
	system("PAUSE");
	return 0;
}

6. (Practice) a. Write a function named countlets() that returns the number of letters in a
string passed as an argument. Digits, spaces, punctuation, tabs, and newline characters
shouldn’t be included in the returned count.

#include "stdafx.h" 
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;


void countlets(string str) {
	int count = 0;
	for (int i = 0; i < str.length();i++)
		if (str.at(i) <= 'z' && str.at(i) >= 'a'){
			count++;
		}
	cout << count << endl;
}

b. Include the countlets() function written for Exercise 6a in an executable C++ program,
and use the program to test the function.

int main()
{	
	countlets("cool it worked");
	system("PAUSE");
	return 0;
}

7. (Program) Write a program that accepts a string from the console and displays the hexadecimal
equivalent of each character in the string.



8. (Program) Write a C++ program that accepts a string from the keyboard and displays the
string one word per line.



9. (Debug) In response to the following code, suppose a user enters the data 12e4:
cout << “Enter an integer: “;
cin  >> value;
What value will be stored in the integer variable value?



10. (Useful utility) a. Write a C++ function that accepts a string and two character values. The
function should return the string with each occurrence of the first character replaced by the
second character.



b. Test the function written for Exercise 10a by writing a program that accepts a string from
the user, calls the function written for Exercise 10a to replace all occurrences of the letter e
with the letter x from the user-entered string, and then displays the changed string.



11. (Useful utility) Modify the function written for Exercise 10a to search for all occurrences
of a user-entered sequence of characters, and then replace this sequence, when it’s found in
the string, with a second user-entered sequence. For example, if the entered string is
Figure 4-4 illustrates the output of Program 4-2 and the user specifies that 4-
is to be replaced by 3-, the resulting string is Figure 3-4 illustrates the output of
Program 3-2. (All occurrences of the searched-for sequence have been changed.)



12. (Program) a. Write a C++ program that stops reading a line of text when a period is entered and
displays the sentence with correct spacing and capitalization. For this program, correct spacing
means only one space should be used between words, and all letters should be lowercase, except
the first letter. For example, if the user enters the text i am       going   to     Go  TO
  THe moVies., the displayed sentence should be I am going to go to the movies.



b. Determine what characters, if any, aren’t displayed correctly by the program you created for
Exercise 12a.


