1. (For review) a. Define the three new data type conversions introduced in this section and
the method of performing each conversion.

Conversion from a class type to a built-in type
Conversion from a built-in type to a class type
Conversion from a class type to a class type

b. Define the terms “type conversion constructor” and “conversion operator function” and
describe how they’re used in user-defined conversions.

type conversion constructor - is any constructor whose first argument is not a member of its
class and whose remaining arguments, if any, have default values.

conversion operator function - Converting from a class data type to a class data type is done in the same manner as a conversion
from a class to a built-in data type.

2. (Program) Write a C++ program that declares a class named Time having integer data members
named hours, minutes, and seconds. Include a type conversion constructor that converts
a long integer, representing the elapsed seconds from midnight, into an equivalent representation
as hours:minutes:seconds. For example, the long integer 30336 should convert to the time
8:25:36. Use military time—for example, 2:30 p.m. is represented as 14:30:00. The relationship
between time representations is as follows:
elapsed seconds = hours × 3600 + minutes × 60 + seconds

#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;
// class declaration section
class Time
{
private:
	int hours;
	int minutes;
	int seconds;
public:
	Time(int = 7, int = 4, int = 20);   // constructor
	Time (long);
	void showTime();      // method to display a Time
	
	
};
// class implementation section
Time::Time(int hh, int mm, int ss)
{
	hours = hh;
	minutes = mm;
	seconds = ss;
}
void Time::showTime()
{
	cout << setfill('0')
		<< setw(2) << hours << ':'
		<< setw(2) << minutes<< ':'
		<< setw(2) << seconds;
	return;
}

//conversion operator definition for converting a long int to a Time
Time::Time(long findTime)
{
	hours = int(findTime / 3600);
	minutes = int((findTime - hours * 3600) / 60);
	seconds = int(findTime - hours * 3600 - minutes * 60);
}


int main()
{
	Time oldTime(30336L), newTime;

	newTime = Time(oldTime);
	newTime.showTime();
	cout << endl;
	
	system("pause");
	return 0;
}

3. (Program) A Julian date is represented as the number of days from a known base date. The
following pseudocode shows one algorithm for converting from a Gregorian date, in the form
month/day/year, to a Julian date with a base date of 00/00/0000. All calculations in this algorithm
use integer arithmetic, which means the fractional part of all divisions must be discarded. In
this algorithm, M = month, D = day, and Y = year.
If M is less than or equal to 2
Set the variable MP = 0 and YP = Y - 1
Else
Set MP = int(0.4 × M + 2.3) and YP = Y
EndIf
T = int(YP / 4) - int(YP / 100) + int(YP / 400)
Julian date = 365 × Y + 31 × (M - 1) + D + T - MP
Using this algorithm, modify Program 11.7 to cast from a Gregorian Date object to its corresponding
Julian representation as a long integer. Test your program by using the Gregorian
dates 1/31/2011 and 3/16/2012, which correspond to the Julian dates 734533 and 734944.

#include "stdafx.h" 
#include <iostream>
#include <iomanip>
using namespace std;
// class declaration section
class Date
{
private:
	int month;
	int day;
	int year;
public:
	Date(int = 3, int = 16, int = 2012);   // constructor
	operator long();
	void showDate();      // method to display a Date
	
	
};
// class implementation section
Date::Date(int mm, int dd, int yy)
{
	month = mm;
	day = dd;
	year = yy;
}
void Date::showDate()
{
	cout << setfill('0')
		<< setw(2) << month << '/'
		<< setw(2) << day<< '/'
		<< setw(2) << year;
	return;
}

//conversion operator definition for converting a long int to a Date
Date::operator long ()
{
	long yymmdd;
	int mp, yp,t, julian;
	if (month <= 2){
		mp = 0;
		yp = year;
	}
	else{ mp = int(.04 * month + 2.3);
	yp = year;
	}
	t = int(yp / 4) - int(yp / 100) + int(yp / 400);
	
	julian = 365 * year + 31 * (month - 1) + day + t - mp;
	return(julian);
	
}


int main()
{
	Date Gregorian(1, 31, 2011), Gregorian2(3,16,2012);
		long Julian, Julian2;
		Julian = long(Gregorian);
		Julian2 = long(Gregorian2);
		cout << "The Gregorian date is" << endl;
		Gregorian.showDate();
		cout << endl;
		Gregorian2.showDate();
		cout << endl;
		cout << "This date, as a Julian integer, is " << Julian << " and " << Julian2 << endl;
	cout << endl;
	
	system("pause");
	return 0;
}

4. (Modify) Modify the program written for Exercise 2 to include a conversion operator function
that converts an object of type Time into a long integer representing the number of seconds
from midnight.

#include "stdafx.h" 
#include <iostream>
#include <iomanip>

using namespace std;
// class declaration section
class Time

{
private:
	int hours;
	int minutes;
	int seconds;
public:

	Time(int = 7, int = 4, int = 20);   // constructor
	operator long();
	void showTime();      // method to display a Time
};

// class implementation section

Time::Time(int hh, int mm, int ss)

{
	hours = hh;
	minutes = mm;
	seconds = ss;
}

void Time::showTime()
{
	cout << setfill('0')
		<< setw(2) << hours << ':'
		<< setw(2) << minutes << ':'
		<< setw(2) << seconds;
	return;
}
//conversion operator definition for converting a long int to a Time

Time::operator long ()
{
	long elapsedsec = hours * 3600 + minutes * 60 + seconds;
	return elapsedsec;
}

int main()
{
	Time oldTime(7, 23, 20);
		long newTime;
		newTime = long(oldTime);
		cout << "This time, as a long integer from midnight is " << newTime << endl;
	
	cout << endl;
	system("pause");

	return 0;
}

5. (Program) Write a C++ program that has a Date class and a Julian class. The Date class
should be the same Date class used in Program 11.6, and the Julian class should represent a
date as a long integer. For this program, include a conversion operator function in the Date
class that converts a Date object to a Julian object, using the algorithm shown in Exercise 3.
Test your program by converting 1/31/2011 and 3/16/2012, which correspond to the Julian
dates 734533 and 734943.



6. (Program) Write a C++ program that has a Time class and an Ltime class. The Time class
should have integer data members named hours, minutes, and seconds, and the Ltime class
should have a long integer data member named elsecs, which represents the number of
elapsed seconds since midnight. For the Time class, include a conversion operator function
named Ltime() that converts a Time object to an Ltime object. For the Ltime class, include
a conversion operator function named Time() that converts an Ltime object to a Time object.


