

1. (Practice) The following declarations were used to create the grades array:
const int NUMGRADES = 500;
double grades[NUMGRADES];
Write two different function headers for a function named sortArray() that accepts the
grades array as a parameter named inArray and returns no value.

void sortArray(double inArray [500])
void sortArray(double inArray [])

2. (Practice) The following declarations were used to create the keys array:
const int NUMKEYS = 256; 
char keys[NUMKEYS];
Write two different function headers for a function named findKey() that accepts the keys
array as a parameter named select and returns a character.

char findKey(char select [256])
char findKey(char select [])

3. (Practice) The following declarations were used to create the rates array:
const int NUMRATES = 256;
double rates[NUMRATES];
Write two different function headers for a function named prime() that accepts the rates
array as an argument named rates and returns a double-precision number.

double prime (double [256])
double prime (double [])

4. (Modify) a. Modify the findMax() function in Program 7.4 to locate the minimum value of
the passed array.

int findMax(int vals[MAXELS])
	{
		int i, max = vals[0];
		for (i = 1; i < MAXELS; i++)
			if (max > vals[i])
				max = vals[i];
		return max;
	}

b. Include the function written in Exercise 4a in a complete program and run the program.

#include <iostream>
using namespace std;

const int MAXELS = 5;
int findMax(int[MAXELS]);  // function prototype

int main()
   {
		int nums[MAXELS] = { 2, 18, 1, 27, 16 };
		cout << "The minimum value is " << findMax(nums) << endl;
		system("PAUSE");
		return 0;
	}
	// find the maximum value
	int findMax(int vals[MAXELS])
	{
		int i, max = vals[0];
		for (i = 1; i < MAXELS; i++)
			if (max > vals[i])
				max = vals[i];
		return max;
	}

5. (Program) Write, compile, and run a C++ program that has a declaration in main() to store
the following numbers in an array named rates: 6.5, 7.2, 7.5, 8.3, 8.6, 9.4, 9.6, 9.8, and 10.0.
There should be a function call to show() that accepts the rates array as a parameter named
rates and then displays the numbers in the array.



6. (Program) a. Write, compile, and run a C++ program that has a declaration in main() to store
the string “Vacation is near” in an array named message. There should be a function call to
display() that accepts message in a parameter named strng and then displays the message.



b. Modify the display() function written in Exercise 6a to display the first eight elements
of the message array.



7. (Program) Write, compile, and run a C++ program that declares three one-dimensional arrays
named price, quantity, and amount. Each array should be declared in main() and be
capable of holding 10 double-precision numbers. The numbers to store in price are 10.62,
14.89, 13.21, 16.55, 18.62, 9.47, 6.58, 18.32, 12.15, and 3.98. The numbers to store in quantity
are 4, 8.5, 6, 7.35, 9, 15.3, 3, 5.4, 2.9, and 4.8. Your program should pass these three arrays to
a function named extend(), which should calculate elements in the amount array as the
product of the corresponding elements in the price and quantity arrays (for example,
amount[1] = price[1] * quantity[1]). After extend() has passed values to the amount
array, the values in the array should be displayed from within main().



8. (Program) Write, compile, and run a C++ program that includes two functions named
calcavg() and variance(). The calcavg() function should calculate and return the average
of values stored in an array named testvals. The array should be declared in main() and
include the values 89, 95, 72, 83, 99, 54, 86, 75, 92, 73, 79, 75, 82, and 73. The variance()
function should calculate and return the variance of the data. The variance is obtained by
subtracting the average from each value in testvals, squaring the values obtained, adding
them, and dividing by the number of elements in testvals. The values returned from
calcavg() and variance() should be displayed by using cout statements in main().

