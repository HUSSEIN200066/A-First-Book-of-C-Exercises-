1. (Modify) a. Rewrite Program 10.8 to include an integer static variable named numemps. This
variable should act as a counter that’s initialized to 0 and incremented by the class constructor
each time a new object is declared. Rewrite the static method dispRate() to display this
counter’s value.

Done!!

b. Test the program written for Exercise 1a. Have the main() function call dispRate() after
each Employee object is created.

#include <iostream>
using namespace std;
// class declaration section
class Employee
{
private:
	static double taxRate;
	int idNum;
	static int numemps;
public:
	Employee(int = 0);      // constructor
	void display();         // accessor method
	static void dispRate(static int = 0); // static member method
};
// static member definition
double Employee::taxRate = 0.07;
// class implementation section
Employee::Employee(int num)
{
	idNum = num;
}
void Employee::display()
{
	cout << "Employee number " << idNum
		<< " has a tax rate of " << taxRate << endl;
	return;
}
void Employee::dispRate(static int i)
{
	cout << "The static tax rate is " << taxRate << endl;

	cout << i << endl;
	return;
}
int main()
{
	int i = 0;
	Employee emp1(11122), emp2(11133),emp3(11144),emp4(11155),a,b,c;
	Employee::dispRate(i++);   // call the static member methods
	emp1.display();
	Employee::dispRate(i++);
	emp2.display();
	Employee::dispRate(i++);
	emp3.display();
	Employee::dispRate(i++);
	emp4.display();
	
	system("PAUSE");
	return 0;
}

2. (Program) a. Construct a class named Circle containing two integer variables named
xCenter and yCenter and a double-precision variable named radius. Additionally, the class
should contain a static data member named scaleFactor. The xCenter and yCenter values
represent a circle’s center point, radius represents the circle’s actual radius, and scaleFactor
represents a scale factor used to scale the circle to fit on a variety of display devices.

Done!!

b. Include the class written for Exercise 2a in a working C++ program.

#include "stdafx.h" 
#include <iostream>
using namespace std;
// class declaration section
class Circle
{
private:
	int xCenter;
	int yCenter;
	double radius;
	int scaleFactor;

public:
	Circle(int = 5, int = 5, double = 3, int = 5);      // constructor
	void display();         // accessor method
	
};

// class implementation section
Circle::Circle(int x,int y, double r , int s)
{
	xCenter = x;
	yCenter = y;
	radius = r;
	scaleFactor = s;
	
}
void Circle::display()
{
	cout << xCenter * scaleFactor << " , " << yCenter * scaleFactor << endl;
	cout << "The radius is " << radius * scaleFactor<< endl;
}



int main()
{
	Circle a(2,3,4,1),b(2,1,3,2),c;
	
	a.display();
	b.display();
	c.display();

	system("PAUSE");
	return 0;
}

3. (Debug) a. State whether the following three statements in Program 10.9
re = addreal(a,b);
im = addimag(a,b);
Complex c(re,im);  // create a new Complex object
could be replaced by this single statement:
Complex c(addreal(a,b), addimag(a,b));

Yes

b. Verify your answer to Exercise 3a by running Program 10.9 with the suggested replacement
statement.

#include "stdafx.h" 
#include <iostream>
#include <cmath>
using namespace std;
// class declaration section
class Complex
{
	// friends list
	friend double addreal(Complex&, Complex&);
	friend double addimag(Complex&, Complex&);
private:
	double real;
	double imag;
public:
	Complex(double = 0, double = 0);  // constructor
	void display();
};
// class implementation section
Complex::Complex(double rl, double im)
{
	real = rl;
	imag = im;
}
void Complex::display()
{
	char sign = '+';
	if (imag < 0) sign = '-';
	cout << real << sign << abs(imag) << 'i';
	return;
}
// friend implementations
double addreal(Complex &a, Complex &b)
{
	return(a.real + b.real);
}
double addimag(Complex &a, Complex &b)
{
	return(a.imag + b.imag);
}
int main()
{
	Complex a(3.2, 5.6), b(1.1, -8.4);
	double re, im;
	cout << "\nThe first complex number is ";
	a.display();
	cout << "\nThe second complex number is ";
	b.display();
	Complex c(addreal(a, b), addimag(a, b));
	cout << "\n\nThe sum of these two complex numbers is ";
	c.display();
	cout <<endl;
	system("PAUSE");
	return 0;
}

4. (Modify) a. Rewrite the program written for Exercise 2a, but include a friend function that
multiples an object’s radius by a static scaleFactor and then displays the actual radius value
and the scaled value.

Done!!

b. Test the program written for Exercise 4a.

#include "stdafx.h" 
#include <iostream>
using namespace std;
// class declaration section
class Circle
{
	//friends list
friend double addscale(Circle&);
private:
	int xCenter;
	int yCenter;
	double radius;
	int scaleFactor = 2;
public:
	Circle(int = 5, int = 5, double = 3);      // constructor
	void display();         // accessor method
};
// class implementation section

Circle::Circle(int x, int y, double r)

{
	xCenter = x;
	yCenter = y;
	radius = r;
}

void Circle::display()

{
	//cout << xCenter * scaleFactor << " , " << yCenter * scaleFactor << endl;
	//cout << "The radius is " << radius * scaleFactor << endl;
}
//friend implementations
double addscale(Circle &a)
{
	cout << "The orginal radius is " << a.radius << endl;
	cout << "THe scale radius is " << (a.radius) * a.scaleFactor << endl;
	return 0;
}
int main()
{
	Circle a(5,2,10);

	Circle c(addscale(a));
	c.display();

	system("PAUSE");

	return 0;

}

5. (Modify) Rewrite Program 10.9 to have only one friend function named addComplex(). This
function should accept two Complex objects and return a Complex object. The real and
imaginary parts of the returned object should be the sum of the real and imaginary parts of the
two objects passed to addComplex().

#include "stdafx.h" 
#include <iostream>
#include <cmath>
#include <tuple>

using namespace std;
// class declaration section
class Complex
{
	// friends list
	friend double addComplex(Complex&, Complex&);

private:

	double real;
	double imag;

public:

	Complex(double = 0, double = 0);  // constructor
	void display();
};

// class implementation section

Complex::Complex(double rl, double im)
{
	real = rl;
	imag = im;
}

void Complex::display()
{
	char sign = '+';
	if (imag < 0) sign = '-';
	cout << real << sign << abs(imag) << 'i';
	return;
}

// friend implementations

double addComplex(Complex &a, Complex &b)
{
	double myComp = (a.real + b.real);
	double imagComp = (a.imag + b.imag);
	char sign = '+';
	if (imagComp < 0) sign = '-';
	cout << myComp << sign << abs(imagComp) << 'i';
	return 0;
}

int main()
{
	Complex a(3.2, 5.6), b(1.1, -8.4);
	double re, im;
	cout << "\nThe first complex number is ";
	a.display();
	cout << "\nThe second complex number is ";
	b.display();

	cout << "\n\nThe sum of these two complex numbers is ";
	Complex c(addComplex(a, b));
	
	cout << endl;
	system("PAUSE");

	return 0;

}

6. (Program) a. Construct a class named Coord containing two double-precision variables
named xval and yval, used to store the x and y values of a point in rectangular coordinates.
The class methods should include constructor and display methods and a friend function
named convPol(). The convPol() function should accept two double-precision numbers, r
and theta, representing a point in polar coordinates and convert them into rectangular coordinates.
For conversion from polar to rectangular coordinates, use these formulas:
x = r cos(theta)
y = r sin(theta)



b. Include the class written for Exercise 6a in a working C++ program.

// Exercise.cpp : Defines the entry point for the console application.
#include "stdafx.h" 
#include <iostream>
#include <cmath>
#include <tuple>

using namespace std;
// class declaration section
class Coord
{
	// friends list
	friend double convPol(Coord&);

private:

	double xval;
	double yval;

public:

	Coord(double = 0, double = 0);  // constructor
	void display();
};

// class implementation section

Coord::Coord(double x, double y)
{
	xval = x;
	yval = y;
}

void Coord::display()
{
	char sign = ';';
	cout << xval << sign << (yval);
	return;
}

// friend implementations

double convPol(Coord &a)
{
	double r = a.xval,theta = a.yval;

	double x = r * cos(theta);
	double y = r * sin(theta);
	char sign = ',';
	cout << x << sign << y << endl;
	return 0;
}

int main()
{
	Coord a(3.2, 5.6), b(1.1, 8.4);
	double r, theta;
	cout << "\nThe first Coord number is ";
	a.display();
	cout << "\nThe second Coord number is ";
	b.display();

	cout << "\n\nCoordiate A values as radius and angle than convered back into Retangler Coordiates ";
	Coord c(convPol(a));
	
	cout << endl;
	system("PAUSE");

	return 0;
}
