
1. (Practice) Write parameter declarations for the following:
a. A parameter named amount that will be a reference to a double-precision value
double& amount
b. A parameter named price that will be a reference to a double-precision number
double& price
c. A parameter named minutes that will be a reference to an integer number
int& minutes
d. A parameter named key that will be a reference to a character
char& key
e. A parameter named yield that will be a reference to a double-precision number
double yield
2. (Practice) Three integer arguments are to be used in a call to a function named time(). Write
a suitable function header for time(), assuming that time() accepts these variables as the
reference parameters sec, min, and hours and returns no value to its calling function.

void time(int& sec,int& min,int& hours)

3. (Modify) a. Rewrite the findMax() function in Program 6.4 so that the variable max,
declared in main(), is used to store the maximum value of the two passed numbers. The
value of max should be set from within findMax(). (Hint : A reference to max has to be
accepted by findMax().)

void findMax(int x, int y, int& max)
  {                    // start of function body
    int maxnum;        // variable declaration
  
    if (x >= y)        // find the maximum number
      maxnum = x;
    else
      maxnum = y;
      max = maxnum;
  
    return;            // return statement
  }

b. Include the function written in Exercise 3a in a working program. Make sure your function
is called from main() and returns a value to main() correctly. Have main() use a cout
statement to display the returned value. Test the function by passing various data to it and
verifying the returned value.

#include <iostream>
using namespace std;

void findMax(int,int,int&); // the function prototype
int main()
{
	int num;
	int num2;
	int num3;
	
	cout << "Enter first number" << endl;
	cin >> num;
	cout << "Enter second number" << endl;
	cin >> num2;
	
	findMax(num, num2, num3);
	
	cout << "The Highest number is" << num3 << endl;

	
	
	system("PAUSE");
	return 0;
	
}
void findMax(int x, int y, int& max)
{                    // start of function body
		int maxnum;        // variable declaration

		if (x >= y)        // find the maximum number
			maxnum = x;
		else
		maxnum = y;
		max = maxnum;
		return;            // return statement
}

4. (Program) a. Write a function named change() that has an integer parameter and six integer
reference parameters named hundreds, fifties, twenties, tens, fives, and ones. The
function is to consider the passed integer value as a dollar amount and convert the value into
the fewest number of equivalent bills. Using the reference parameters, the function should
alter the arguments in the calling function.

void change(int parameter, int& hundreds, int& fifties, int& twenties, int& tens, int& fives, int& ones)
{                    // start of function body
	
	hundreds = parameter / 100;
	parameter %= 100;
	fifties = parameter / 50;
	parameter %= 50;
	twenties = parameter / 20;
	parameter %= 20;
	tens = parameter / 10;
	parameter %= 10;
	fives = parameter / 5;
	parameter %= 5;
	ones = parameter;

		return;            // return statement
}

b. Include the function written in Exercise 4a in a working program. Make sure your function
is called from main() and returns a value to main() correctly. Have main() use a cout
statement to display the returned value. Test the function by passing various data to it and
verifying the returned value.

#include <iostream>
using namespace std;

void change(int,int&, int&, int&, int&, int&,int&); // the function prototype
int main()
{
	int num,num2,num3,num4,num5,num6,num7;
	
	
	cout << "Enter your number" << endl;
	cin >> num;

	change(num,num2,num3,num4,num5,num6,num7);
	cout << "You get back " << num2<< "hundreds"<< endl;
	cout << "You get back " << num3 << "fifties" << endl;
	cout << "You get back " << num4 << "twenties" << endl;
	cout << "You get back " << num5 << "tens" << endl;
	cout << "You get back " << num6 << "fives" << endl;
	cout << "You get back " << num7 << "ones" << endl;


	
	
	system("PAUSE");
	return 0;
	
}
void change(int parameter, int& hundreds, int& fifties, int& twenties, int& tens, int& fives, int& ones)
{                    // start of function body
	
	hundreds = parameter / 100;
	parameter %= 100;
	fifties = parameter / 50;
	parameter %= 50;
	twenties = parameter / 20;
	parameter %= 20;
	tens = parameter / 10;
	parameter %= 10;
	fives = parameter / 5;
	parameter %= 5;
	ones = parameter;

		return;            // return statement
}

5. (Program) Write a function named time() that has an integer parameter named seconds
and three integer reference parameters named hours, mins, and secs. The function is to
convert the passed number of seconds into an equivalent number of hours, minutes, and seconds.
Using the reference parameters, the function should alter the arguments in the calling
function.

#include <iostream>
using namespace std;

void time(int,int&, int&, int&); // the function prototype
int main()
{
	int num,num2,num3,num4;
	
	
	cout << "Enter your number" << endl;
	cin >> num;

	time(num,num2,num3,num4);
	cout << "You get back " << num2<< " hours"<< endl;
	cout << "You get back " << num3 << " minutes" << endl;
	cout << "You get back " << num4 << " seconds" << endl;


	
	
	system("PAUSE");
	return 0;
	
}
void time(int seconds,int& hours, int& mins, int& secs)
{                    // start of function body
	
	hours = seconds / 120;
	seconds %= 120;
	mins = seconds / 60;
	mins %= 60;
	secs = seconds;
	
		return;            // return statement
}

6. (Program) Write a function named yearCalc() that has an integer parameter representing
the total number of days from the date 1/1/2000 and reference parameters named year, month,
and day. The function is to calculate the current year, month, and day given the number of days
passed to it. Using the reference parameters, the function should alter the arguments in the
calling function. For this problem, assume each year has 365 days, and each month has 30 days.

#include <iostream>
using namespace std;

void yearCalc(int,int&, int&, int&); // the function prototype
int main()
{
	int num,num2,num3,num4;
	
	
	cout << "Enter your number" << endl;
	cin >> num;

	yearCalc(num,num2,num3,num4);
	cout << "You get back " << num2<< " years"<< endl;
	cout << "You get back " << num3 << " months" << endl;
	cout << "You get back " << num4 << " days" << endl;


	
	
	system("PAUSE");
	return 0;
	
}
void yearCalc(int total,int& year, int& month, int& days)
{                    // start of function body
	
	year = total / 365;
	total %= 365;
	month=  total / 30;
	total %= 30;
	days = total;
	
		return;            // return statement
}

7. (Program) Write a function named liquid() that has an integer number parameter and
reference parameters named gallons, quarts, pints, and cups. The passed integer represents
the total number of cups, and the function is to determine the numbers of gallons, quarts,
pints, and cups in the passed value. Using the reference parameters, the function should alter
the arguments in the calling function. Use these relationships: 2 cups = 1 pint, 4 cups = 1 quart,
and 16 cups = 1 gallon.

#include <iostream>
using namespace std;

void liquid(int,int&, int&, int&,int&); // the function prototype
int main()
{
	int num,num2,num3,num4, num5;
	
	
	cout << "Enter your number" << endl;
	cin >> num;

	liquid(num,num2,num3,num4,num5);
	cout << "You get back " << num2<< " gallons"<< endl;
	cout << "You get back " << num3 << " quarts" << endl;
	cout << "You get back " << num4 << " pints" << endl;
	cout << "You get back " << num5 << " cups" << endl;


	
	
	system("PAUSE");
	return 0;
	
}
void liquid(int total,int& gallons, int& quarts, int& pints, int& cups)
{                    // start of function body
	
	gallons = total / 16;
	total %= 16;
	quarts=  total / 4;
	total %= 4;
	pints = total / 2;
	total %= 2;
    cups = total;
	
		return;            // return statement
}

8. (Desk check) The following program uses the same argument and parameter names in both
the calling and called functions. Determine whether doing so causes any problem for the
compiler.
#include <iostream>
using namespace std;
void time(int&, int&);  // function prototype
int main()
{
  int min, hour;
    cout << “Enter two numbers :”;
  cin  >> min >> hour;
  time(min, hour);
  return 0;
}
void time(int& min, int& hour)   // accept two references
{
  int sec;
  sec = (hour * 60 + min) * 60;
  cout << “The total number of seconds is “ << sec << endl;
  return;

NO!!, Doing this does not cause any problems the main function and 
modular function act independently when it comes to the declaration of variable names.

