1. (Review) What are the three items associated with the variable named total?

The variable named total has these 3 items associated with it:the value stored in the variable, the number of bytes reserved for the variable, 
and where in memory these bytes are located

2. (Review) If average is a variable, what does &average mean?

If average is a varible than &average is the address of the variable average.

3. (Practice) For the variables and addresses in Figure 8.9, determine the addresses corresponding
to the expressions &temp, &dist, &date, and &miles.

*See textbook for Figure 8.9 Memory bytes*

&temp = 16892
&dist = 16896
&data = 16900
&miles = 16908

4. (Practice) a. Write a C++ program that includes the following declaration statements. Have
the program use the address operator and a cout statement to display the addresses corresponding
to each variable.|
int num, count;
long date;
float slope;
double yield;

#include <iostream>
using namespace std;

int main(){


	int num, count;
	long date;
	float slope;
	double yield;

	cout << "The address of num is " << &num << endl;
	cout << "The address of count is " << &count << endl;
	cout << "The address of date is " << &date << endl;
	cout << "The address of slope is " << &slope << endl;
	cout << "The address of yield is " << &yield << endl;

	system("PAUSE");
	return 0;
}

b. After running the program written for Exercise 4a, draw a diagram of how your computer
has set aside storage for the variables in the program. On your diagram, fill in the addresses
the program displays.

num   ->|00B3FB0C|->storage set aside last hex digits |0D||0E||0F|
count ->|00B3FB00|->storage set aside last hex digits |01||02||03|
data  ->|00B3FAF4|->storage set aside last hex digits |F5||F6||F7|
slope ->|00B3FAE8|->storage set aside last hex digits |E9||EA||EB|
yield ->|00B3FAD8|->storage set aside last hex digits |D9||DA||DB|

c. Modify the program written in Exercise 4a (using the sizeof() operator discussed in
Section 2.1) to display the amount of storage your computer reserves for each data type.
With this information and the address information provided in Exercise 4b, determine
whether your computer set aside storage for the variables in the order in which they were
declared.

#include <iostream>
using namespace std;

int main(){


	int num, count;
	long date;
	float slope;
	double yield;

	cout << "The address of num is " << sizeof(&num) << endl;
	cout << "The address of count is " << sizeof(&count) << endl;
	cout << "The address of date is " << sizeof(&date) << endl;
	cout << "The address of slope is " << sizeof(&slope) << endl;
	cout << "The address of yield is " << sizeof(&yield) << endl;

	cout << sizeof(num) << endl;
	cout << sizeof(count) << endl;
	cout << sizeof(date) << endl;
	cout << sizeof(slope) << endl;
	cout << sizeof(yield) << endl;
	
	system("PAUSE");
	return 0;
}

Yes, the computer sets aside storage for the variables in the order in which they were declared

5. (Review) If a variable is declared as a pointer, what must be stored in the variable?

A address is stored in the pointer variable and the data type it points to is declared.

6. (Practice) Using the indirection operator, write expressions for the following:
a. The variable pointed to by xAddr
   *xAddr;
b. The variable whose address is in yAddr
   *yAddr;
c. The variable pointed to by ptYld
   *ptYld;
d. The variable pointed to by ptMiles
   *ptMiles;
e. The variable pointed to by mptr
   *mptr;
f. The variable whose address is in pdate
   *pdate;
g. The variable pointed to by distPtr
   *distPtr;
h. The variable pointed to by tabPt
   *tabPt;
i. The variable whose address is in hoursPt
   *hoursPt;


7. (Practice) Write declaration statements for the following:
a. The variable pointed to by yAddr is an integer.
   int *yAddr;
b. The variable pointed to by chAddr is a character.
   char *chAddr;
c. The variable pointed to by ptYr is a long integer.
   long *ptYr;
d. The variable pointed to by amt is a double-precision variable.
   double *amt;
e. The variable pointed to by z is an integer.
   int *z;
f. The variable pointed to by qp is a single-precision variable.
   float *qp;
g. datePt is a pointer to an integer.
   int *datePt;
h. yldAddr is a pointer to a double-precision variable.
   double *yldAddr;
i. amtPt is a pointer to a single-precision variable.
   float  *amtPt;
j. ptChr is a pointer to a character variable.
   char *ptChr;

8. (Review) a. What are the variables yAddr, chAddr, ptYr, amt, z, qp, datePt, yldAddr,
amtPt, and ptChr used in Exercise 7 called?

Pointers functions

b. Why are the variable names amt, z, and qp used in Exercise 7 not good choices for
pointer names?

They have no indicators to what they are being used for and can be hard to keep track of in a program.

9. (Practice) Write English sentences that describe whatâ€™s contained in the following declared
variables:
a. char *keyAddr;
keyAddr is a pointer to a character variable.
b. int *m;
m is a pointer to an integer
c. double *yldAddr;
yldAddr is a pointer to a double-precision varable.
d. long *yPtr;
yPtr is a pointer to an integer
e. double *pCou;
pCou is a pointer to a double-precision varable.
f. int *ptDate;
ptDate is a pointer to an integer.


10. (Practice) Which of the following is a declaration for a pointer?
a. long a;
Not a declaration
b. char b;
Not a declaration
c. char *c;
declaration 
d. int x;
Not a declaration
e. int *p;
declaration
f. double w;
Not a declaration
g. float *k;
declaration
h. float l;
Not a declaration
i. double *z;
declaration

11. (Practice) For the following declarations,
int *xPt, *yAddr;
long *dtAddr, *ptAddr;
double *ptZ;
int a;
long b;
double c;
determine which of the following statements is valid:
a. yAddr = &a; b. yAddr = &b; c. yAddr = &c;
d. yAddr = a; e. yAddr = b; f. yAddr = c;
g. dtAddr = &a; h. dtAddr = &b; i. dtAddr = &c;
j. dtAddr = a; k. dtAddr = b; l. dtAddr = c;
m. ptZ = &a; n. ptAddr = &b; o. ptAddr = &c;
p. ptAddr = a; q. ptAddr = b; r. ptAddr = c;
s. yAddr = xPt; t. yAddr = dtAddr; u. yAddr = ptAddr;



12. (Practice) For the variables and addresses in Figure 8.10, fill in the data determined by the
following statements:
a. ptNum = &m;
b. amtAddr = &amt;
c. *zAddr = 25;
d. k = *numAddr;
e. ptDay = zAddr;
f. *ptYr = 2011;
g. *amtAddr = *numAddr;
Variable: ptNum
Address: 500
Variable: amtAddr
Address: 564
Variable: zAddr
Address: 8024
Variable: numAddr
Address: 10132
Variable: ptDay
Address: 14862
Variable: ptYr
Address: 15010
Variable: amt
Address: 16256
Variable: firstnum
Address: 18938
Variable: years
Address: 694
Variable: m
Address: 8096
Variable: slope
Address: 20492
Variable: k
Address: 24608
20492 18938
694
154
Figure 8.10 Memory locations for Exercise 12
