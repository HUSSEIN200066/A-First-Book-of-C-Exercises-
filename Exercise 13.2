1. (Practice) Enter and run Program 13.1.

#include "stdafx.h" 
#include <iostream>
#include <list>
#include <algorithm>
#include <string>
using namespace std;
int main()
{
	list<string> names, addnames;
	string n;
	// add names to the original list
	names.push_front("Dolan, Edith");
	names.push_back("Lanfrank, John");
	// create a new list
	addnames.push_front("Acme, Sam");
	addnames.push_front("Mening, Stephen");
	addnames.push_front("Zemann, Frank");
	names.sort();
	addnames.sort();
	// merge the second list into the first
	names.merge(addnames);
	cout << "The final list size is : " << names.size() << endl;
	cout << "This list contains the names : \n";
	while (!names.empty())
	{
		cout << names.front() << endl;
		names.pop_front();  // remove the object
	}
	system("PAUSE");
	return 0;
}

//Done!!

2. (Practice) Enter and run Program 13.2.

//Done!!
#include "stdafx.h" 
#include <iostream>
#include <list>
#include <string>
using namespace std;
// class declaration section
class NameTele
{
private:
	string name;
	string phoneNum;
	// class implementation section
public:
	NameTele(string nn, string phone)   // constructor
	{
		name = nn;
		phoneNum = phone;
	}
	// inline method definitions
	string getName(){ return name; }
	string getPhone(){ return phoneNum; }
};
int main()
{
	list<NameTele> employee;  // instantiate and initialize the list
	// using objects in the array
	employee.push_front(NameTele("Acme, Sam", "(555) 898–2392"));
	employee.push_back(NameTele("Dolan, Edith", "(555) 682–3104"));
	employee.push_back(NameTele("Lanfrank, John", "(555) 718–4581"));
	employee.push_back(NameTele("Mening, Stephen", "(555) 382–7070"));
	employee.push_back(NameTele("Zemann, Harold", "(555) 219–9912"));
	// retrieve all list objects
	// use accessor methods to extract the name and pay rate
	cout << "The size of the list is " << employee.size() << endl;
	cout << "\n     Name              Telephone";
	cout << "\n--------------       --------------\n";
	while (!employee.empty())
	{
		cout << employee.front().getName()
			<< "\t     " << employee.front().getPhone() << endl;
		employee.pop_front();  // remove the object
	}
	system("PAUSE");
	return 0;
}

3. (Modify) Modify Program 13.2 to prompt the user for a name. Have the program search the
existing list for the entered name. If the name is in the list, display the corresponding phone
number; otherwise, display this message: The name is not in the current phone list.

#include "stdafx.h" 
#include <iostream>
#include <list>
#include <string>
using namespace std;
// class declaration section
class NameTele
{
private:
	string name;
	string phoneNum;
	// class implementation section
public:
	NameTele(string nn, string phone)   // constructor
	{
		name = nn;
		phoneNum = phone;
	}
	// inline method definitions
	string getName(){ return name; }
	string getPhone(){ return phoneNum; }
};

int main()
{
	string name;
	list<NameTele> employee;  // instantiate and initialize the list
	// using objects in the array
	employee.push_front(NameTele("Acme,Sam", "(555) 898–2392"));
	employee.push_back(NameTele("Dolan,Edith", "(555) 682–3104"));
	employee.push_back(NameTele("Lanfrank,John", "(555) 718–4581"));
	employee.push_back(NameTele("Mening,Stephen", "(555) 382–7070"));
	employee.push_back(NameTele("Zemann,Harold", "(555) 219–9912"));
	// retrieve all list objects
	// use accessor methods to extract the name and pay rate
	cout << "The size of the list is " << employee.size() << endl;
	//cout << "\n     Name              Telephone";
	//cout << "\n--------------       --------------\n";

	/*while (!employee.empty())
	{
		cout << employee.front().getName()
			<< "\t     " << employee.front().getPhone() << endl;
		employee.pop_front();  // remove the object
	}*/
	cin >> name;
	while (!employee.empty()){
		if (employee.front().getName() == name){
			cout << employee.front().getPhone() << endl;
		}
		else if (employee.front().getName() != name){
			cout << "This name is not in the current phone list" << endl;
		}
		employee.pop_front();
	}
	
	
	system("PAUSE");
	return 0;
}

4. (Practice) Write a C++ program containing a linked list of 10 integer numbers. Have the program
display the numbers in the list.

#include "stdafx.h" 
#include <iostream>
#include <list>
#include <string>
using namespace std;
// class declaration section
class NameTele
{
private:
	int num;
	// class implementation section
public:
	NameTele(int nn)   // constructor
	{
		num = nn;
	}
	// inline method definitions
	int getNum(){ return num; }

};

int main()
{
	list<NameTele> numbers;  // instantiate and initialize the list
	// using objects in the array
	numbers.push_front(NameTele(201));
	numbers.push_back(NameTele(120));
	numbers.push_back(NameTele(4581));
	numbers.push_back(NameTele(7070));
	numbers.push_back(NameTele(9912));
	numbers.push_front(NameTele(12343));
	numbers.push_back(NameTele(123));
	numbers.push_back(NameTele(4521));
	numbers.push_back(NameTele(770));
	numbers.push_back(NameTele(992));

	// retrieve all list objects
	// use accessor methods to extract the name and pay rate
	cout << "The size of the list is " << numbers.size() << endl;
	cout << "\n     Numbers         ";
	cout << "\n------------------    \n";

	while (!numbers.empty())
	{
		cout << numbers.front().getNum() << endl;
		numbers.pop_front();  // remove the object
	}
	
	system("PAUSE");
	return 0;
}

5. (Practice) Using the linked list of objects shown in Figure 13.3, write the sequence of steps
for deleting the object for John Lanfrank from the list.

#include "stdafx.h" 
#include <iostream>
#include <list>
#include <string>
using namespace std;
// class declaration section
class NameTele
{
private:
	string name;
	string phoneNum;
	// class implementation section
public:
	NameTele(string nn, string phone)   // constructor
	{
		name = nn;
		phoneNum = phone;
	}
	// inline method definitions
	string getName(){ return name; }
	string getPhone(){ return phoneNum; }
};
int main()
{
	string name;
	list<NameTele> employee;  // instantiate and initialize the list
	// using objects in the array
	employee.push_front(NameTele("Acme, Sam", "(555) 898–2392"));
	employee.push_back(NameTele("Dolan, Edith", "(555) 682–3104"));
	employee.push_back(NameTele("Lanfrank, John", "(555) 718–4581"));
	employee.push_back(NameTele("Mening, Stephen", "(555) 382–7070"));
	employee.push_back(NameTele("Zemann, Harold", "(555) 219–9912"));
	// retrieve all list objects
	// use accessor methods to extract the name and pay rate
	cout << "The size of the list is " << employee.size() << endl;
	cout << "\n     Name              Telephone";
	cout << "\n--------------       --------------\n";
	name = "Lanfrank, John";
	while (!employee.empty())
	{
		if (employee.front().getName() == name){
			employee.pop_front();
		}
		cout << employee.front().getName()
			<< "\t     " << employee.front().getPhone() << endl;
		employee.pop_front();  // remove the object
	}
	system("PAUSE");
	return 0;
}

6. (Practice) Generalize the description in Exercise 5 to describe the sequence of steps for
removing the nth object from a list of linked objects. The nth object is preceded by the (n - 1)st
object and followed by the (n + 1)st object. Make sure to store all pointer values correctly.



7. (Desk check) Determine the output of this program:
#include <iostream>
#include <list>
using namespace std;
int main()
{
  int intValue;
  double sum = 0.0;
  double average;
   int nums[] = {1, 2, 3, 4, 5 };  // create array of integer values
   list<int> x(nums, nums + 4); // instantiate a list of ints using
                                // a constructor that initializes
                                // the list with values from array
   cout <<”\nThe list x initially has a size of “ << x.size()
        << “,\n and contains the objects: “;
   while (!x.empty())
   {
     cout << x.front() << “  “;
     x.pop_front();
   }
   cout << endl;
}
